---
openapi: 3.0.0
info:
  title: Ares Kudo API
  version: 1.0.3
servers:
  - url: https://fluorine-master-prod-latest-ue1.dev.graebert.com/api/
  - url: https://staging.kudo.graebert.com/api/
  - url: https://kudo.graebert.com/api/
security:
  - sessionHeaderAuth: [ ]
  - sessionCookieAuth: [ ]
tags:
  - name: Integration
  - name: Users
  - name: Admins
  - name: Files
  - name: Fonts
  - name: Authentication
  - name: Templates
  - name: Shortcuts
  - name: Comments & markups
  - name: Xrefs
  - name: Trash
  - name: Versions
  - name: BlockLibrary
  - name: Resources
  - name: Organization
  - name: Folders
  - name: Non-Prod
  - name: Message
  - name: Configuration
paths:
  /users/share/email:
    get:
      tags:
        - Users
      description: Get list of user suggestions to share
      operationId: emailShare
      x-isAdmin: false
      x-requireStorage: false
      x-isMention: false
      parameters:
        - name: pattern
          in: header
          description: query to search for users
          required: false
          schema:
            type: string
        - name: fileId
          in: header
          description: current file
          required: false
          schema:
            type: string
        - name: scope
          in: header
          description: Similar to storage type, allows to specify some different scope to look in
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSuggestedUsers'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users:
    get:
      tags:
        - Users
      description: Gets user info
      operationId: getUser
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Users
      description: Update user profile
      operationId: updateUser
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Non-Prod
      description: Create new user, non-prod endpoint
      deprecated: true
      operationId: addUser
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewUser'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUser'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Users
      description: Delete user, admin only
      operationId: deleteUser
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/capabilities:
    get:
      tags:
        - Users
      description: Gets user capabilities
      operationId: getUserCapabilities
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCapabilities'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/foreign:
    post:
      tags:
        - Non-Prod
      description: Login for Graebert's CP, Google account and SolidWorks. Used by Commander, non-prod only. (unavailable)
      operationId: addForeignUser
      security: [ ]
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: sessionId
          in: header
          description: user sessionId
          required: false
          schema:
            type: string
        - name: token
          in: header
          description: Token to authenticate user from Licensing
          required: false
          schema:
            type: string
        - name: email
          in: header
          description: username/email of the user
          required: false
          schema:
            type: string
        - name: password
          in: header
          description: password of the user account
          required: false
          schema:
            type: string
        - name: deviceId
          in: header
          description: id of the device which is being used to access the product
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Non-Prod
      description: Unlink Google account. (unavailable)
      operationId: deleteForeignUser
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/sso:
    post:
      tags:
        - Authentication
      description: Login with sso
      operationId: ssoLogin
      security: [ ]
      parameters:
        - name: deviceId
          in: header
          description: ID of the device which is being used to access the product
          required: false
          schema:
            type: string
        - name: token
          in: header
          description: Token to authenticate user from Licensing
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ssoRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/portal:
    post:
      tags:
        - Users
      description: Create portal user (Unavailable)
      deprecated: true
      operationId: addPortalUser
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/portal/exists:
    get:
      tags:
        - Users
      description: Check portal exist (Unavailable)
      operationId: checkPortalUserExist
      deprecated: true
      security: [ ]
      parameters:
        - name: email
          in: query
          description: email of the user to be created
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckEmail'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/confirm:
    post:
      tags:
        - Non-Prod
      description: Notify admins to confirm user account. Non-prod only.
      operationId: usersConfirm
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/confirmUserAccount'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/find:
    get:
      tags:
        - Users
      description: Find user
      operationId: findUser
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: pattern
          in: header
          description: query to search for users
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/resetrequest:
    post:
      tags:
        - Non-Prod
      description: Request reset password, non-prod.
      operationId: resetUserRequest
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetRequest'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/reset:
    post:
      tags:
        - Non-Prod
      description: Reset user account, non-prod only.
      operationId: resetUserPwd
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/tryReset:
    post:
      tags:
        - Non-Prod
      description: Check if link for reset is still alive, non-prod only.
      operationId: tryResetUser
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tryReset'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/email:
    post:
      tags:
        - Non-Prod
      description: Change email, non-prod only.
      operationId: changeEmail
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmail'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /authentication:
    post:
      tags:
        - Non-Prod
      description: Authenticate, non-prod only. (unavailable)
      operationId: authenticate
      deprecated: true
      security: [ ]
      parameters:
        - name: authHeader
          in: header
          description: authorization header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /logout:
    post:
      tags:
        - Authentication
      description: Logout
      operationId: logout
      security: [ ]
      parameters:
        - name: sessionId
          in: header
          description: user sessionId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /auth:
    get:
      tags:
        - Authentication
      description: check auth
      operationId: checkAuth
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /nonce:
    get:
      tags:
        - Non-Prod
      description: Get nonce, non-prod only.
      operationId: getNonce
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nonce'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        default:
          $ref: '#/components/responses/DefaultError'
  /longnonce:
    get:
      tags:
        - Non-Prod
      description: Get long nonce
      operationId: getLongNonce
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongNonce'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/users:
    get:
      tags:
        - Admins
      description: Get user info
      operationId: adminGetUsers
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: pageToken
          in: header
          description: Get next users using pagination token
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Admins
      description: Update users
      operationId: adminUpdateUsers
      x-isAdmin: true
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUsersByAdmin'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/users/{userId}:
    get:
      tags:
        - Admins
      description: Get user info
      operationId: adminGetSpecificUserId
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Admins
      description: Update user
      operationId: adminUpdateUser
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserByAdmin'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Admins
      description: Delete user
      operationId: adminDeleteUser
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUser'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/users/{userId}/accounts:
    get:
      tags:
        - Admins
      description: Get user accounts
      operationId: adminGetUserAccounts
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserAccounts'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/storages:
    get:
      tags:
        - Admins
      description: Get list of available storages
      operationId: getAdminStorages
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfStorages'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/storages/access:
    get:
      tags:
        - Admins
      description: Get list of disabled storages
      operationId: getAdminDisabledStorages
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfDisabledStorages'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Admins
      description: Update storage (Enable/Disable)
      operationId: updateAdminStorageAccess
      x-isAdmin: true
      x-requireStorage: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorage'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/skeleton/{userId}:
    put:
      tags:
        - Admins
      description: Update skeleton for user
      operationId: updateUserSkelton
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          description: id of user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkeleton'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Admins
      description: Create folder skeleton for user in kudo drive
      operationId: createUserSkelton
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          description: id of user for which the folder structure is created
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserSkeleton'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/user/create:
    post:
      tags:
        - Admins
      description: Create new user
      operationId: adminCreateUser
      x-isAdmin: true
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserByAdmin'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCreateUser'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/files:
    get:
      tags:
        - Admins
      description: Get list of files
      operationId: adminGetFiles
      x-isAdmin: true
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: userId
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/folders/{folderId}:
    get:
      tags:
        - Admins
      description: Get list of folders in specific folder
      operationId: adminGetFolders
      x-isAdmin: true
      x-requireStorage: true
      x-trash: false
      parameters:
        - $ref: '#/components/parameters/FolderId'
        - name: userId
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/templates:
    post:
      tags:
        - Admins
      description: Upload new template
      operationId: adminAddTemplate
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/templates/{tmplId}:
    put:
      tags:
        - Admins
      description: Update template
      operationId: adminUpdateTemplate
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: tmplId
          in: path
          description: templateId to update
          required: true
          schema:
            type: string
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Admins
      description: Delete template
      operationId: adminDeleteTemplate
      x-isAdmin: true
      x-requireStorage: false
      x-byType: false
      parameters:
        - name: tmplId
          in: path
          description: templateId to delete
          required: true
          schema:
            type: string
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/sessions/{sessionId}:
    delete:
      tags:
        - Admins
      description: Delete session with specific id
      operationId: adminDeleteSession
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: sessionId
          in: path
          description: User session to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/files:
    get:
      tags:
        - Admins
      description: Get logs about files
      operationId: adminGetFilesLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileLog'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/sessions:
    get:
      tags:
        - Admins
      description: Get logs about sessions
      operationId: adminGetSessionsLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionsLog'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/users:
    get:
      tags:
        - Admins
      description: Get logs about users
      operationId: adminGetUsersLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersLog'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/storages:
    get:
      tags:
        - Admins
      description: Get logs about storages
      operationId: adminGetStoragesLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllStorages'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/shares:
    get:
      tags:
        - Admins
      description: Get logs about shares
      operationId: adminGetSharesLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetShareLog'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/subscriptions:
    get:
      tags:
        - Admins
      description: Get logs about subscriptions
      operationId: adminGetSubscriptionsLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionsLog'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/performance:
    get:
      tags:
        - Admins
      description: Get logs about performance
      operationId: adminGetPerformanceLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPerformanceStats'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/links:
    get:
      tags:
        - Admins
      description: Get logs about links
      operationId: adminGetLinksLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOldLinks'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/links/cached:
    get:
      tags:
        - Admins
      description: Get logs about cached links
      operationId: adminGetCachedLinksLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCachedLinks'
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/job/{jobId}:
    get:
      tags:
        - Admins
      description: Get logs about job status
      operationId: adminGetJobLog
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: jobId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobStatus'
        default:
          $ref: '#/components/responses/DefaultError'
  /stats/performance:
    post:
      description: Save performance stats
      operationId: savePerformanceStats
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePerformanceStats'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /customtemplates/{tmplId}/clone:
    post:
      tags:
        - Templates
      description: Clone custom template
      operationId: cloneCustomTemplate
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneTemplateResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /templates:
    get:
      tags:
        - Templates
      description: Get list of templates
      operationId: getTemplates
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemplates'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Templates
      description: Upload new template
      operationId: addTemplate
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Templates
      description: Delete all templates
      operationId: deleteTemplates
      x-isAdmin: false
      x-requireStorage: false
      x-byType: true
      parameters:
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
        - name: ids
          in: header
          description: comma-separated template ids to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /templates/{tmplId}:
    get:
      tags:
        - Templates
      description: Get template with specific id
      operationId: getTemplate
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: tmplId
          in: path
          description: id to get template
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            file:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Templates
      description: Update template
      operationId: updateTemplate
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: tmplId
          in: path
          description: id to get template
          required: true
          schema:
            type: string
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
        - name: name
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplate'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Templates
      description: Delete template
      operationId: deleteTemplate
      x-isAdmin: false
      x-requireStorage: false
      x-byType: false
      parameters:
        - name: tmplId
          in: path
          description: templateId to delete
          required: true
          schema:
            type: string
        - name: templateType
          in: header
          description: type of the template (USER / PUBLIC / ORG)
          required: true
          schema:
            type: string
        - name: id
          in: header
          description: userId
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /templates/{tmplId}/clone:
    post:
      tags:
        - Templates
      description: Create a drawing using the specific template
      operationId: cloneTemplate
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: tmplId
          in: path
          description: templateId used to create file
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneTemplate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneTemplateResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /allUserTemplates:
    get:
      tags:
        - Templates
      description: get all templates related to specific user
      operationId: getUserTemplates
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: orgId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: groupId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allUserTemplates'
        default:
          $ref: '#/components/responses/DefaultError'
  /trash:
    get:
      tags:
        - Trash
      description: Get list of deleted objects
      operationId: getTrash
      x-isAdmin: false
      x-requireStorage: true
      x-trash: true
      parameters:
        - name: userId
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Trash
      description: Trash batch
      operationId: updateTrash
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: confirmed
          in: header
          description: Mark as confirmed to delete in case of file is being edited
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrashBatch'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Trash
      description: Erase all deleted files
      operationId: eraseAllTrash
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: storageType
          in: header
          description: current storage to erase all files
          required: true
          schema:
            type: string
        - name: externalId
          in: header
          description: accountId for the current storage
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EraseAllTrash'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /trash/folder/{folderId}:
    get:
      tags:
        - Trash
      description: Get deleted folder
      operationId: getTrashFolder
      x-isAdmin: false
      x-requireStorage: true
      x-trash: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
        - name: userId
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /msg:
    post:
      tags:
        - Message
      description: Send message
      operationId: sendMessage
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MSG'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /msg/{msgId}:
    put:
      tags:
        - Message
      description: Read message
      operationId: readMessage
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: msgId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Message
      description: Delete message
      operationId: deleteMessage
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: msgId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /fonts:
    get:
      tags:
        - Fonts
      description: Get list of all available fonts
      operationId: getFonts
      x-isAdmin: false
      x-requireStorage: false
      x-isCompanyFont: true
      x-isUserFont: true
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFonts'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Fonts
      description: Upload new user font
      operationId: addUserFont
      x-isAdmin: false
      x-requireStorage: false
      x-isUploadForCompany: false
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFontResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /fonts/company/{companyId}:
    get:
      tags:
        - Fonts
      description: Get list of company fonts
      operationId: getCompanyFonts
      x-isAdmin: false
      x-requireStorage: false
      x-isCompanyFont: true
      x-isUserFont: false
      security: [ ]
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFonts'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Fonts
      description: Upload new font for company
      operationId: addCompanyFont
      x-isAdmin: false
      x-requireStorage: false
      x-isUploadForCompany: true
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFontResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /fonts/user:
    get:
      tags:
        - Fonts
      description: Get list of user fonts
      operationId: getUserFonts
      x-isAdmin: false
      x-requireStorage: false
      x-isCompanyFont: false
      x-isUserFont: true
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFonts'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /fonts/{fontId}:
    get:
      tags:
        - Fonts
      description: Get specific font
      operationId: getFont
      x-isAdmin: false
      x-requireStorage: false
      security: [ ]
      parameters:
        - name: fontId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFontByID'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Fonts
      description: Delete specific font
      operationId: deleteFont
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fontId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFontResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /feedback:
    post:
      description: Send feedback, Draft side only.
      operationId: sendFeedback
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: subject
          in: header
          description: Test
          required: false
          schema:
            type: string
        - name: comment
          in: header
          description: Test
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /company/{companyId}:
    get:
      tags:
        - Organization
      description: Get company info
      operationId: getCompany
      x-requireStorage: false
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompany'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Organization
      description: Update company info
      operationId: updateCompany
      x-requireStorage: false
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdateBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /storages/{type}/add:
    get:
      tags:
        - integration
      description: Add storage
      operationId: addStorage
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: redirect_url
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        default:
          $ref: '#/components/responses/DefaultError'
  /healthcheckup:
    get:
      description: Check if server is online
      operationId: healthCheckUp
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /img/email/{objectId}:
    get:
      description: Get email image
      operationId: getEmailImage
      security: [ ]
      parameters:
        - name: objectId
          in: path
          description: Test
          required: true
          schema:
            type: string
        - name: st
          in: query
          description: Test
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: fid
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /email/file/{objectId}:
    get:
      description: Get file redirect url
      operationId: getFileRedirect
      security: [ ]
      parameters:
        - name: objectId
          in: path
          required: true
          schema:
            type: string
        - name: st
          in: query
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: token
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/string:
              schema:
                type: string
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /token/generate:
    post:
      description: generate session token
      operationId: generateToken
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGenerateResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files:
    get:
      tags:
        - Files
      description: Get list of files.
      operationId: getFiles
      x-isAdmin: false
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: userId
          in: header
          required: false
          schema:
            type: string
        - name: useNewStructure
          in: header
          description: (Only for ARES Touch) true if client wants to get "My Files/Shared Files" type folder structure, else existing structure would be returned
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFiles'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Files
      description: Upload a new file or save an existing file
      operationId: uploadFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: header
          description: place to upload file
          required: false
          schema:
            type: string
        - name: fileId
          in: header
          description: id of the file to upload (required while saving the drawing)
          required: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: file session ID (required while saving the drawing)
          required: false
          schema:
            type: string
        - name: baseChangeId
          in: header
          description: latest versionId of the file (required while saving the drawing)
          required: false
          schema:
            type: string
        - name: presignedUploadId
          in: header
          description: requestId for the uploaded file using presigned url
          required: false
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/upload/check:
    get:
      tags:
        - Files
      description: Check if the file is uploaded.
      operationId: checkUpload
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: uploadToken
          in: header
          description: Token to verify the status of file upload
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        "202":
          $ref: '#/components/responses/Accepted'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/upload/cancel:
    put:
      tags:
        - Files
      description: Try to cancel the current async upload process
      operationId: cancelUpload
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: uploadToken
          in: header
          description: Upload token for canceling the particular upload
          required: false
          schema:
            type: string
        - name: presignedUploadId
          in: header
          description: presignedUploadId to delete already uploaded s3 file
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/external/{storage}:
    post:
      tags:
        - Files
      description: Connect storage from the native app
      operationId: connectStorage
      x-isAdmin: false
      x-requireStorage: false
      security: [ ]
      parameters:
        - name: storage
          in: path
          description: storage type to connect
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalStorage'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/recent:
    get:
      tags:
        - Files
      description: Get list of recent files
      operationId: getRecentFiles
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecentFilesResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/recent/validate:
    get:
      tags:
        - Files
      description: Validate list of recent files
      operationId: validateRecentFiles
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateRecentFilesResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/recent/{fileId}/validate:
    get:
      tags:
        - Files
      description: Validate single recent file
      operationId: validateRecentFile
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/recent:
    delete:
      tags:
        - Files
      description: Remove recent file preview
      operationId: deleteRecentFile
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: id of the file for which the recent preview is to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/recent/restore:
    put:
      tags:
        - Files
      description: Restore recent file preview
      operationId: restoreRecentFile
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveRecentFile'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/search:
    get:
      tags:
        - Files
      description: Search
      operationId: searchFiles
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: query
          in: header
          description: query to search for files/folders
          required: true
          schema:
            type: string
        - name: storageType
          in: header
          description: storage to be searched
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/notifications:
    get:
      tags:
        - Files
      description: Get list of notifications
      operationId: getNotificationsList
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotifications'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Files
      description: Mark notifications
      operationId: markNotifications
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: timestamp
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarkNotification'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}:
    put:
      tags:
        - Files
      description: Update file
      operationId: updateFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
      description: Delete file
      operationId: deleteFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /poll:
    delete:
      tags:
        - Users
      description: stop polling auth url
      operationId: stopPoll
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopPollAuth'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/clone:
    post:
      tags:
        - Files
      description: Clone file
      operationId: cloneFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneFileBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneFileResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/data:
    get:
      tags:
        - Files
      description: Get file data (Download file)
      operationId: getFileData
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: ID of the file to download
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            fileSize:
              schema:
                type: integer
            versionId:
              schema:
                type: integer
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/diffs:
    get:
      tags:
        - Files
      description: Get file diffs
      operationId: getFileDiffs
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: token
          in: header
          description: link's token
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: link's password
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileDiffs'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Files
      description: Add diffs in file
      operationId: putFileDiffs
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: file id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiffs'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDiffs'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/info:
    get:
      tags:
        - Files
      description: Get object info
      operationId: getFileInfo
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileInfo'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/trashed:
    get:
      tags:
        - Files
      description: Get deleted file
      operationId: getDeletedFile
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTrashedStatus'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/thumbnail:
    get:
      tags:
        - Files
      description: Get file thumbnail
      operationId: getFileThumbnail
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThumbnail'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/preview:
    post:
      tags:
        - Files
      description: Upload preview
      operationId: uploadFilePreview
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPreview'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/link:
    get:
      tags:
        - Files
      description: Get shared link
      operationId: getSharedLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: endTime
          in: header
          required: false
          schema:
            type: string
        - name: resetPassword
          in: header
          required: false
          schema:
            type: boolean
        - name: password
          in: header
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLink'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Files
      description: Update shared link
      operationId: updateSharedLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: endTime
          in: header
          required: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: resetEndTime
          in: header
          required: false
          schema:
            type: boolean
        - name: resetPassword
          in: header
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLink'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Files
      description: Send shared link
      operationId: sendSharedLink
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: data
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
        "501":
          description: Not implemented
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
    delete:
      tags:
        - Files
      description: Remove shared link
      operationId: removeSharedLink
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/request:
    post:
      tags:
        - Files
      description: Request access to file
      operationId: requestFileAccess
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/session:
    get:
      tags:
        - Files
      description: Get Xenon Session
      operationId: getXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXSession'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Files
      description: Update Xenon Session
      operationId: updateXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
        - name: invert
          in: header
          required: false
          schema:
            type: boolean
        - name: downgrade
          in: header
          required: false
          schema:
            type: boolean
        - name: versionId
          in: header
          required: false
          schema:
            type: string
        - name: applicantXSession
          in: header
          description: applicant for this session
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateXSessionResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Files
      description: Save xsession
      operationId: saveXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: force
          in: header
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveXSession'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveXSessionResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
      description: Remove Xenon Session
      operationId: removeXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: xSessionId
          description: file session id
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/session/request:
    post:
      tags:
        - Files
      description: Request xsession
      operationId: requestXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: xSessionId
          description: file session id
          in: header
          required: true
          schema:
            type: string
        - name: isMySession
          in: header
          description: is request for owned session
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
      description: Deny xsession
      operationId: denyXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: xSessionId
          description: file session id
          in: header
          required: true
          schema:
            type: string
        - name: requestXSessionId
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/trash:
    put:
      tags:
        - Files
      description: Send file to trash
      operationId: trashFile
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/untrash:
    put:
      tags:
        - Files
      description: Restore file
      operationId: unTrashFile
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/download:
    get:
      tags:
        - Files
      description: download file
      operationId: downloadFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "202":
          $ref: '#/components/responses/Accepted'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/xref/search:
    post:
      tags:
        - Files
        - Xrefs
      description: Get Xref
      operationId: getFileXref
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/FileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XrefSearchBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXref'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/xref/checkpath:
    post:
      tags:
        - Files
        - Xrefs
      description: Check xref path
      operationId: checkFileXrefPath
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: path
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckXrefPath'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions:
    get:
      tags:
        - Files
        - Versions
      description: Get list of versions
      operationId: getFileVersions
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVersions'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Files
        - Versions
      description: Upload version
      operationId: uploadFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
        - name: presignedUploadId
          in: header
          description: requestId for the uploaded file version using presigned url
          required: false
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsRef'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/latest:
    get:
      tags:
        - Files
        - Versions
      description: Get latest version id
      operationId: getLatestFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLatestVersionId'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/links:
    get:
      tags:
        - Files
      description: Get file links
      operationId: getFileLinks
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLinks'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/{versionId}/downloadlink:
    post:
      tags:
        - Files
        - Versions
      description: Get version download link
      operationId: generateFileVersionDownloadLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionDownloadLink'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
        - Versions
      description: Delete version download link
      operationId: deleteFileVersionDownloadLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/{versionId}/viewlink:
    post:
      tags:
        - Files
        - Versions
      description: Get version view link
      operationId: generateFileVersionViewLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionViewLink'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
        - Versions
      description: Get version view link
      operationId: deleteFileVersionViewLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/{versionId}/data:
    get:
      tags:
        - Files
        - Versions
      description: Get version data
      operationId: getFileVersionData
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: false
          schema:
            type: string
        - name: returnDownloadURL
          in: header
          description: true if the client wants to receive a download link instead of data stream
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/{versionId}/info:
    get:
      tags:
        - Files
        - Versions
      description: Get version info
      operationId: getFileVersionInfo
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/{versionId}:
    delete:
      tags:
        - Files
        - Versions
      description: Delete version
      operationId: deleteFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/{versionId}/promote:
    post:
      tags:
        - Files
        - Versions
      description: Promote version
      operationId: promoteFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/versions/{versionId}/mark-printed:
    put:
      tags:
        - Files
        - Versions
      description: Mark version as printed
      operationId: markVersionAsPrinted
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/annotations:
    get:
      tags:
        - Files
      description: Get list of all annotations
      operationId: getAnnotations
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: returnDeleted
          in: header
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAnnotations'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/commentThreads:
    get:
      tags:
        - Files
        - Comments & markups
      description: Get list of сomment threads
      operationId: getCommentThreads
      x-isAdmin: false
      x-requireStorage: false
      x-address: getCommentThreads
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentThreads'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/commentThread:
    post:
      tags:
        - Files
        - Comments & markups
      description: add comment thread
      operationId: addCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-address: addCommentThread
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentThreadRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentThreadResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/commentThread/{annotationId}:
    get:
      tags:
        - Files
        - Comments & markups
      description: Get comment thread
      operationId: getCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: getCommentThread
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentThread'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Files
        - Comments & markups
      description: Update comment thread
      operationId: updateCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: updateCommentThread
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentThreadRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentThread'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
        - Comments & markups
      description: Delete comment thread
      operationId: deleteCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: deleteCommentThread
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: query
          required: true
          schema:
            type: integer
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/commentThread/{annotationId}/comment:
    post:
      tags:
        - Files
        - Comments & markups
      description: Add comment in thread
      operationId: addComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: addComment
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/commentThread/{annotationId}/comment/{commentId}:
    put:
      tags:
        - Files
        - Comments & markups
      description: Update comment in thread
      operationId: updateComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: updateComment
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentInThread'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateComment'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
        - Comments & markups
      description: Delete comment in thread
      operationId: deleteComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: deleteComment
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteComment'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/markups:
    get:
      tags:
        - Files
        - Comments & markups
      description: Get list of markups
      operationId: getMarkups
      x-isAdmin: false
      x-requireStorage: false
      x-address: getMarkups
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMarkups'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/markup:
    post:
      tags:
        - Files
        - Comments & markups
      description: Add markup
      operationId: addMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-address: addMarkup
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMarkupRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddMarkupResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/markup/{annotationId}:
    get:
      tags:
        - Files
        - Comments & markups
      description: Get markup
      operationId: getMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: getMarkup
      parameters:
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Markup'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Files
        - Comments & markups
      description: Update markup
      operationId: updateMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: updateMarkup
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMarkupRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMarkupResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
        - Comments & markups
      description: Delete markup
      operationId: deleteMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: deleteMarkup
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: query
          required: true
          schema:
            type: integer
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/markup/{annotationId}/comment:
    post:
      tags:
        - Files
        - Comments & markups
      description: Add comment in markup
      operationId: addMarkupComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: addMarkupComment
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRB'
      responses:
        "200":
          description: ONE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/markup/{annotationId}/comment/{commentId}:
    put:
      tags:
        - Files
        - Comments & markups
      description: Update comment in markup
      operationId: updateMarkupComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: updateMarkupComment
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentInThread'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateComment'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
        - Comments & markups
      description: Delete comment in markup
      operationId: deleteMarkupComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: deleteMarkupComment
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/attachments:
    get:
      tags:
        - Files
      description: Get list of attachments
      operationId: getAttachments
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAttachments'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/attachment:
    post:
      tags:
        - Files
        - Comments & markups
      description: Add attachment
      operationId: addAttachment
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAttachmentResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/attachments/{attachmentId}:
    get:
      tags:
        - Files
        - Comments & markups
      description: Get attachment with preview
      operationId: getAttachment
      x-isAdmin: false
      x-requireStorage: false
      x-preview: true
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/attachments/{attachmentId}/original:
    get:
      tags:
        - Files
      description: Get attachment without preview
      operationId: getOriginalAttachment
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      x-preview: false
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: false
          schema:
            type: string
        - name: attachmentId
          in: path
          description: Test
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/attachments/{attachmentId}/description:
    get:
      tags:
        - Files
        - Comments & markups
      description: Get attachment description
      operationId: getAttachmentDescription
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FileId'
        - name: password
          in: header
          required: false
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAttachmentDescription'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/subscription:
    get:
      tags:
        - Files
      description: Get subscription info
      operationId: getSubscription
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscription'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Files
      description: Add subscription
      operationId: addSubscription
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddSubscription'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Files
      description: Delete subscription
      operationId: deleteSubscription
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscription'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/notifications:
    get:
      tags:
        - Files
      description: Get file notification
      operationId: getNotification
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Files
      description: Mark file notifications as read
      operationId: markNotification
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/shortcut:
    post:
      tags:
        - Files
        - Shortcuts
      description: create shortcut for folder
      operationId: createFileShortcut
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShortcut'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShortcutResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/shortcut:
    post:
      tags:
        - Folders
        - Shortcuts
      description: create shortcut for folder
      operationId: createFolderShortcut
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShortcut'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShortcutResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/xref/search:
    post:
      tags:
        - Folders
        - Xrefs
      description: search for attach xref
      operationId: getFolderXref
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/FolderId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XrefSearchBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXref'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/xref/checkpath:
    post:
      tags:
        - Folders
        - Xrefs
      description: Check xref path
      operationId: checkFolderXrefPath
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: path
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckXrefPath'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders:
    post:
      tags:
        - Folders
      description: Create folder
      operationId: createFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: userId
          in: header
          required: false
          schema:
            type: string
        - name: externalId
          in: header
          required: false
          schema:
            type: string
        - name: storageType
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}:
    get:
      tags:
        - Folders
      description: Get list of folders
      operationId: getFolders
      x-isAdmin: false
      x-requireStorage: true
      x-trash: false
      parameters:
        - $ref: '#/components/parameters/FolderId'
        - name: useNewStructure
          in: header
          description: (Only for ARES Touch) true if client wants to get "My Files/Shared Files" type folder structure, else existing structure would be returned
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Folders
      description: Update folder
      operationId: updateFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
        - name: externalId
          in: header
          required: false
          schema:
            type: string
        - name: userId
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Folders
      description: Delete folder
      operationId: deleteFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/owners:
    get:
      tags:
        - Folders
      description: Get list of folder owners
      operationId: getFolderOwners
      deprecated: true
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOwners'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/clone:
    post:
      tags:
        - Folders
      description: Clone folder
      operationId: cloneFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneFolderRB'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneFolderResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/download:
    get:
      tags:
        - Folders
      description: Download folder
      operationId: downloadFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
        - name: token
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                  _id:
                    type: string
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/BodyStream'
        "202":
          $ref: '#/components/responses/Accepted'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/download:
    post:
      tags:
        - Files
      description: Download multiple files and folders
      operationId: downloadMultiple
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: header
          description: Parent folderId for the objects
          required: true
          schema:
            type: string
        - name: token
          in: header
          description: token to check and get additional data
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadMultipleBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "202":
          $ref: '#/components/responses/Accepted'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/info:
    get:
      tags:
        - Folders
      description: Get info about folder
      operationId: getFolderInfo
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/FolderId'
        - name: useNewStructure
          in: header
          description: (Only for ARES Touch) true if client wants to get "My Files/Shared Files" type folder structure, else existing structure would be returned
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderInfo'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/path:
    get:
      tags:
        - Folders
      description: Get folder path
      operationId: getFolderPath
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPath'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/path:
    post:
      tags:
        - Folders
      description: Get paths of all folders (for gdrive only)
      operationId: getFoldersPath
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderIds
          in: header
          description: Array of folders id's
          required: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBatchPath'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/trash:
    put:
      tags:
        - Folders
      description: Send folder to trash
      operationId: trashFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/untrash:
    put:
      tags:
        - Folders
      description: Restore folder
      operationId: unTrashFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /folders/{folderId}/metadata:
    get:
      tags:
        - Folders
      description: Get metadata
      operationId: getFolderMetadata
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetadata'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Folders
      description: Update metadata
      operationId: updateFolderMetadata
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FolderId'
        - name: metadata
          in: header
          required: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Folders
      description: Delete metadata
      operationId: deleteFolderMetadata
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/FolderId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /saml:
    post:
      description: Save saml respone
      operationId: saveSamlResponse
      security: [ ]
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Saml'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveSamlResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /revision:
    get:
      tags:
        - Configuration
      description: Get Revision
      operationId: getRevision
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionResponse'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        default:
          $ref: '#/components/responses/DefaultError'
  /metrics:
    get:
      description: Get Metrics
      operationId: getMetrics
      security: [ ]
      deprecated: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          $ref: '#/components/responses/DefaultError'
  /integration:
    get:
      tags:
        - integration
      description: Get list of available integrations from config
      operationId: getIntegrations
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        default:
          $ref: '#/components/responses/DefaultError'
  /integration/accounts:
    get:
      tags:
        - integration
      description: Get list of integration accounts
      operationId: getIntegrationAccounts
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationAccounts'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /integration/account:
    put:
      tags:
        - integration
      description: Switch integration accounts
      operationId: switchIntegrationAccount
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationAccount'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/Unauthorized'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - integration
      description: Delete integration account (NOT AVAILABLE)
      operationId: deleteIntegrationAccount
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationAccount'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /integration/account/sessions:
    post:
      tags:
        - integration
      description: Get account file sessions
      operationId: getAccountFileSessions
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationAccount'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXSession'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /erase:
    put:
      description: Erase batch
      operationId: eraseBatch
      x-isAdmin: false
      x-requireStorage: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrashRequestBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /restore:
    put:
      description: Restore batch
      operationId: restoreBatch
      x-isAdmin: false
      x-requireStorage: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrashRequestBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /integration/settings:
    get:
      tags:
        - integration
      description: Get integration settings
      operationId: getIntegrationSettings
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationSettings'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /regions:
    get:
      description: Get list of regions
      operationId: getRegions
      x-isAdmin: false
      x-requireStorage: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegions'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/mention:
    get:
      tags:
        - Users
      description: Get list of user suggestions to mention
      operationId: usersToMention
      x-isAdmin: false
      x-requireStorage: false
      x-isMention: true
      parameters:
        - name: pattern
          in: header
          description: query to search for users
          required: true
          schema:
            type: string
        - name: fileId
          in: header
          description: current file
          required: false
          schema:
            type: string
        - name: includeMyself
          in: header
          description: to include yourself in the suggestion list
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSuggestedUsers'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /users/region:
    post:
      tags:
        - Non-Prod
      description: change user region
      operationId: changeRegion
      x-isAdmin: true
      deprecated: true
      x-requireStorage: true
      parameters:
        - name: s3Region
          in: header
          description: region to change
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /files/compare:
    post:
      tags:
        - Files
      description: compare drawings
      operationId: compareFiles
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesCompare'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/logs/flush:
    post:
      tags:
        - Admins
      description: flush the logs
      operationId: flushLogs
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/memcached:
    get:
      tags:
        - Admins
      description: Get memcached data
      operationId: getMemcacheData
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Admins
      description: Delete memcache data
      operationId: deleteMemcacheData
      deprecated: true
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: memcachedkey
          in: header
          description: key to delete memcache
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /admin/thumbnail:
    put:
      tags:
        - Admins
      description: Update thumbnail generation
      operationId: updateThumbnailGeneration
      x-isAdmin: true
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThumbnailGenerationBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /login/cognito:
    post:
      tags:
        - Authentication
      description: cognito login
      operationId: doCognitoLogin
      deprecated: true
      security: [ ]
      parameters:
        - name: id_token
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - Authentication
      description: cognito login
      operationId: getCognitoLogin
      deprecated: true
      security: [ ]
      parameters:
        - name: id_token
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /users/foreign/extend:
    put:
      tags:
        - Authentication
      description: Graebert login
      operationId: graebertLogin
      deprecated: true
      security: [ ]
      parameters:
        - name: token
          in: header
          description: token for login
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /session/{fileId}/checkin:
    put:
      tags:
        - Files
      description: To checkin the file
      operationId: fileCheckIn
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: fileId to checkin
          required: true
          schema:
            type: string
        - name: requestToken
          in: header
          description: token to verify the request
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks:
    get:
      tags:
        - BlockLibrary
      description: Get list of all block libraries for user/group/organization/public
      operationId: getBlockLibraries
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: ownerId
          in: header
          description: id of user/group/organization
          required: true
          schema:
            type: string
        - name: ownerType
          in: header
          description: type (USER/GROUP/ORG/PUBLIC)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlockLibraries'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - BlockLibrary
      description: Create new block library for user/group/organization/public
      operationId: createBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlockLibrary'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBlockLibraryResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - BlockLibrary
      description: delete multiple block libraries
      operationId: deleteBlockLibraries
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMultipleBlocks'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}:
    put:
      tags:
        - BlockLibrary
      description: update existing block library
      operationId: updateBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlockLibrary'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBlockLibraryResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - BlockLibrary
      description: delete block library
      operationId: deleteBlockLibrary
      deprecated: true
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - BlockLibrary
      description: get block library info
      operationId: getBlockLibraryInfo
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to get library info
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockLibraryResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}/items:
    post:
      tags:
        - BlockLibrary
      description: Upload new block inside a library
      operationId: uploadBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: name
          in: header
          description: name of uploaded block
          required: false
          schema:
            type: string
        - name: description
          in: header
          description: description of uploaded block
          required: false
          schema:
            type: string
        - name: libId
          in: path
          description: libId to upload block
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadBlockResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - BlockLibrary
      description: get all blocks of library
      operationId: getBlocks
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to get blocks
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlocks'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - BlockLibrary
      description: delete multiple blocks from a library
      operationId: deleteBlocks
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMultipleBlocks'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}/items/{itemId}:
    put:
      tags:
        - BlockLibrary
      description: Update any existing block
      operationId: updateBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to upload block
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to update block
          required: true
          schema:
            type: string
        - name: name
          in: header
          description: new block name
          required: false
          schema:
            type: string
        - name: description
          in: header
          description: new block description
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BodyStream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - BlockLibrary
      description: delete block from a library
      operationId: deleteBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to delete block
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - BlockLibrary
      description: get block info
      operationId: getBlockInfo
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to get info
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}/items/{itemId}/content:
    get:
      tags:
        - BlockLibrary
      description: get content(binary) for a block file
      operationId: getBlockContent
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to get block content
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/items/search:
    get:
      tags:
        - BlockLibrary
      description: searches for libraries/blocks within accessible objects for users.
      operationId: searchBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: term
          in: query
          description: term to filter results
          required: true
          schema:
            type: string
        - name: libId
          in: header
          description: search inside a specific library
          required: false
          schema:
            type: string
        - name: type
          in: header
          description: search for BLOCK/LIBRARY
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockLibrarySearchedResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}/access:
    post:
      tags:
        - BlockLibrary
      description: Give block library access to users
      operationId: shareBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to share
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - BlockLibrary
      description: delete block library access from users
      operationId: unShareBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to unShare
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnShareBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}/items/{itemId}/access:
    post:
      tags:
        - BlockLibrary
      description: Give block access to users
      operationId: shareBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId for the current library
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to share
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - BlockLibrary
      description: delete block access from users
      operationId: unShareBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId for current library
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to unShare
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnShareBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/{folderId}/items:
    get:
      tags:
        - Resources
      description: Get all objects inside any folder of a resource
      operationId: getResourceFolderContent
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: folderId
          in: path
          description: get all objects for this folderId
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: false
        - name: objectFilter
          in: header
          description: filter for files / folders
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceFolderResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Resources
      description: create object inside any folder of a resource
      operationId: createResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: folderId
          in: path
          description: create object for this folderId
          required: true
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceFolderBody'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateResourceFileBody'
            encoding:
              resourceFile:
                contentType: image/vnd.dwg, image/vnd.dxf, font/ttf, application/octet-stream, font/otf, font/collection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/{folderId}/items/{itemId}:
    put:
      tags:
        - Resources
      description: Update a resource object
      operationId: updateResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: folderId
          in: path
          description: parent of the object
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: object to update
          required: true
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceBody'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateResourceBody'
            encoding:
              resourceFile:
                contentType: image/vnd.dwg, image/vnd.dxf, font/ttf, application/octet-stream, font/otf, font/collection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceObjectResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/items/trash:
    put:
      tags:
        - Resources
      description: Delete resource objects
      operationId: deleteResourceObjects
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourceObjectsBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusErrorsResourceResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/items/{itemId}/info:
    get:
      tags:
        - Resources
      description: Get resource object info
      operationId: getResourceObjectInfo
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: itemId
          in: path
          description: object to get
          required: true
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceObjectResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/items/{itemId}/content:
    get:
      tags:
        - Resources
      description: Download Resource Object
      operationId: downloadResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: itemId
          in: path
          description: object to download
          required: true
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          schema:
            type: string
        - name: recursive
          in: header
          description: Only applicable for folder download, to recursively download inner folder content
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: true
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/items/{itemId}/path:
    get:
      tags:
        - Resources
      description: Get resource folder path
      operationId: getResourceFolderPath
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: itemId
          in: path
          description: object to get path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceFolderPathResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/items/{itemId}/share:
    post:
      tags:
        - Resources
      description: Share a resource object with another user
      operationId: shareResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: itemId
          in: path
          description: object to get path
          required: true
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareResourceObjectsBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareResourceResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/items/{itemId}/unshare:
    post:
      tags:
        - Resources
      description: Unshare a resource object from a user or self
      operationId: unshareResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: itemId
          in: path
          description: object to get path
          required: true
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnShareResourceObjectsBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnShareResourceResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /resources/{type}/items/move:
    post:
      tags:
        - Resources
      description: Move a resource object to another folder
      operationId: moveResourceObjects
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - name: parentFolderId
          in: header
          description: folder to which items has to be moved
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/OwnerType'
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveResourceObjectsBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusErrorsResourceResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /config:
    get:
      tags:
        - Configuration
      description: Get configuration properties
      operationId: getConfigProperties
      security: [ ]
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/{fileId}/checksave:
    get:
      tags:
        - Files
      description: Check if file can be saved properly
      operationId: checkFileSave
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: id of the file to check
          required: true
          schema:
            type: string
        - name: baseChangeId
          in: header
          description: latest versionId of the file
          required: false
          schema:
            type: string
        - name: xSessionId
          description: file session id
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSaveCheckResults'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /permissions:
    get:
      tags:
        - Configuration
      description: Get roles and permissions in Kudo
      operationId: getRolesAndPermissions
      security: [ ]
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesAndPermissionsResponse'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /upload/request:
    put:
      tags:
        - Files
      description: begin or end the multiple files upload
      operationId: requestMultipleUpload
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: begin
          in: header
          description: begin/end flag (boolean)
          required: true
          schema:
            type: string
        - name: uploadRequestId
          in: header
          description: requestId for uploading multiple files (required only when begin is false)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /files/signedurl/generate:
    post:
      tags:
        - Files
      description: Get presigned upload URL for s3
      operationId: getS3PreSignedUploadURL
      x-isAdmin: false
      x-requireStorage: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSignedUrlBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPreSignedUrl'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}/items/{itemId}/lock:
    post:
      tags:
        - BlockLibrary
      description: Lock block for editing
      operationId: lockBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: library ID
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "403":
          $ref: '#/components/responses/RequestFailed'
        default:
          $ref: '#/components/responses/DefaultError'
  /library/blocks/{libId}/items/{itemId}/unlock:
    post:
      tags:
        - BlockLibrary
      description: Unlock block for editing
      operationId: unlockBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: library ID
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: block ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
        "412":
          $ref: '#/components/responses/RequestFailed'
        default:
          $ref: '#/components/responses/DefaultError'
components:
  schemas:
    ListOfStoragesRef:
      type: array
      items:
        type: string
    GetXrefRef:
      type: object
      properties:
        path:
          type: string
        files:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              owner:
                type: string
              isOwner:
                type: boolean
              canMove:
                type: boolean
              updateDate:
                type: integer
              changer:
                type: string
              changerId:
                type: string
              size:
                type: string
              sizeValue:
                type: integer
              name:
                type: string
              storageType:
                type: string
    ResourceFile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        parent:
          type: string
        resourceType:
          type: string
        ownerId:
          type: string
        ownerType:
          type: string
        ownerName:
          type: string
        fileName:
          type: string
        isOwner:
          type: boolean
        fileSize:
          type: string
        userId:
          type: string
        path:
          type: string
        faces:
          type: array
          items:
            type: object
            properties:
              bold:
                type: string
              fontFamily:
                type: string
              index:
                type: integer
                format: int64
              italic:
                type: string
              style:
                type: string
              weight:
                type: integer
                format: int64
    ResourceFolder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        parent:
          type: string
        resourceType:
          type: string
        ownerId:
          type: string
        ownerType:
          type: string
        ownerName:
          type: string
        isOwner:
          type: boolean
        userId:
          type: string
        path:
          type: string
    BlockLibrary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          type: string
        thumbnail:
          type: string
        thumbnailId:
          type: string
        thumbnailName:
          type: string
        created:
          type: integer
        modified:
          type: integer
        shares:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              email:
                type: string
              name:
                type: string
              mode:
                type: string
    Block:
      type: object
      properties:
        id:
          type: string
        libId:
          type: string
        name:
          type: string
        description:
          type: string
        fileName:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          type: string
        thumbnail:
          type: string
        thumbnailId:
          type: string
        thumbnailName:
          type: string
        created:
          type: integer
        modified:
          type: integer
        shares:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              email:
                type: string
              name:
                type: string
              mode:
                type: string
    Region:
      type: object
      properties:
        countries:
          type: array
          items:
            type: string
        countries_short:
          type: array
          items:
            type: string
        bucket:
          type: string
    GetFileInfo:
      type: object
      properties:
        _id:
          type: string
        wsId:
          type: string
        filename:
          type: string
        folderId:
          type: string
        ownerEmail:
          type: string
        changer:
          type: string
        changerEmail:
          type: string
        size:
          type: string
        sizeValue:
          type: integer
          format: int64
        updateDate:
          minimum: 0
          type: integer
          format: int64
        thumbnailName:
          type: string
        thumbnail:
          type: string
        previewId:
          type: string
        geomdata:
          type: string
        preview:
          type: string
        versionId:
          type: string
        verId:
          type: string
        owner:
          type: string
        creationDate:
          type: integer
          format: int64
        shared:
          type: boolean
        viewOnly:
          type: boolean
        isOwner:
          type: boolean
        isDeleted:
          type: boolean
        public:
          type: boolean
        share:
          $ref: '#/components/schemas/Share'
        permissions:
          $ref: '#/components/schemas/Permissions'
    GetFolderInfo:
      type: object
      properties:
        _id:
          type: string
        wsId:
          type: string
        name:
          type: string
        parent:
          type: string
        ownerEmail:
          type: string
        changer:
          type: string
        changerEmail:
          type: string
        size:
          type: string
        sizeValue:
          type: integer
          format: int64
        updateDate:
          minimum: 0
          type: integer
          format: int64
        owner:
          type: string
        creationDate:
          type: integer
          format: int64
        shared:
          type: boolean
        viewOnly:
          type: boolean
        isOwner:
          type: boolean
        share:
          $ref: '#/components/schemas/Share'
        permissions:
          $ref: '#/components/schemas/Permissions'
    StorageSettings:
      type: object
      properties:
        capabilities:
          type: object
          properties:
            share:
              type: object
              properties:
                file:
                  type: boolean
                folder:
                  type: boolean
                publicLink:
                  type: boolean
                fileUpdatePermissions:
                  type: boolean
                folderUpdatePermissions:
                  type: boolean
                revokeAccessOwnFile:
                  type: boolean
                revokeAccessOthersFile:
                  type: boolean
                revokeAccessOwnFolder:
                  type: boolean
                revokeAccessOthersFolder:
                  type: boolean
            clone:
              type: object
              properties:
                file:
                  type: boolean
                folder:
                  type: boolean
            move:
              type: object
              properties:
                file:
                  type: boolean
                folder:
                  type: boolean
            open:
              type: object
              properties:
                drawingMimeTypeFilter:
                  type: boolean
            trash:
              type: object
              properties:
                isAvailable:
                  type: boolean
                erase:
                  type: boolean
                eraseAll:
                  type: boolean
                restore:
                  type: boolean
        code:
          type: string
        isConnectable:
          type: boolean
        serviceName:
          type: string
        displayName:
          type: string
    Share:
      type: object
      properties:
        editor:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              email:
                type: string
              permissions:
                $ref: '#/components/schemas/Permissions'
    Permissions:
      type: object
      properties:
        canManageVersions:
          type: boolean
        canManagePublicLink:
          type: boolean
        canDownload:
          type: boolean
        canRename:
          type: boolean
        canChangeOwner:
          type: boolean
        canCreateFolders:
          type: boolean
        canMoveFrom:
          type: boolean
        canOpen:
          type: boolean
        canManageTrash:
          type: boolean
        canComment:
          type: boolean
        canMove:
          type: boolean
        canEdit:
          type: boolean
        canMoveTo:
          type: boolean
        canViewPublicLink:
          type: boolean
        canViewPermissions:
          type: boolean
        canClone:
          type: boolean
        canManagePermissions:
          type: boolean
        canDelete:
          type: boolean
        canCreateFiles:
          type: boolean
    GetFileLogRef:
      type: object
      properties:
        username:
          type: string
        userId:
          type: string
        fileId:
          type: string
        storageType:
          type: string
        device:
          type: string
        actionType:
          type: string
        opened:
          type: integer
          format: int64
      description: arraylist
    GetAllStoragesRef:
      type: object
      properties:
        email:
          type: string
        userId:
          type: string
        storages:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        connected:
          type: integer
          format: int64
      description: JsonArray
    GetTemplatesRef:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
    Font:
      type: object
      properties:
        file:
          type: string
        id:
          type: string
        size:
          type: string
        url:
          type: string
        faces:
          type: array
          items:
            type: object
            properties:
              fontFamily:
                type: string
              index:
                type: number
              weight:
                type: number
              style:
                type: string
              bold:
                type: boolean
              italic:
                type: boolean
    Options:
      type: object
      properties:
        export:
          type: string
        plMaxNumberOfDays:
          type: number
        sharedLinks:
          type: boolean
        storages:
          type: object
    UploadFileRef:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        thumbnailName:
          type: string
        changeId:
          type: string
        fileConflicted:
          type: boolean
        fileSessionExpired:
          type: boolean
    RecentFilesRef:
      type: object
      properties:
        timestamp:
          type: number
        fileId:
          type: string
        storageType:
          type: string
        filename:
          type: string
        thumbnail:
          type: string
        folderId:
          type: string
          description: optional, depends on file.
    SearchRef:
      type: object
      properties:
        storageType:
          type: string
        externalId:
          type: string
        name:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/GetFileInfo'
        folders:
          type: array
          items:
            $ref: '#/components/schemas/GetFolderInfo'
    GetSuggestedUsersRef:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        username:
          type: string
        surname:
          type: string
    SessionRef:
      type: object
      properties:
        fileName:
          type: string
        fSessionId:
          type: string
        externalId:
          type: string
        creationDate:
          type: integer
        userId:
          type: string
        mode:
          type: string
        versionId:
          type: string
        storageType:
          type: string
        state:
          type: string
        _id:
          type: string
        stateChanged:
          type: integer
        device:
          type: string
        email:
          type: string
    VersionsRef:
      type: object
      properties:
        id:
          type: string
        hash:
          type: string
        name:
          type: string
        thumbnail:
          type: string
        modifier:
          type: object
          properties:
            email:
              type: string
            id:
              type: string
            isCurrentUser:
              type: boolean
            name:
              type: string
            photo:
              type: string
        permissions:
          type: object
          properties:
            canDelete:
              type: boolean
            canPromote:
              type: boolean
            canRename:
              type: boolean
            isDownloadable:
              type: boolean
        creationTime:
          type: integer
        size:
          type: integer
        isCustomName:
          type: boolean
    LinkRef:
      type: object
      properties:
        convertToPdf:
          type: boolean
        fileId:
          type: string
        versionId:
          type: string
        externalId:
          type: string
        userId:
          type: string
        link:
          type: string
        shortLink:
          type: string
        isPublic:
          type: boolean
        token:
          type: string
        type:
          type: string
        isEnabled:
          type: boolean
        export:
          type: boolean
        linkEndTime:
          type: integer
        linkOwnerIdentity:
          type: string
        ownerId:
          type: string
        passwordRequired:
          type: boolean
        versionType:
          type: string
        storageType:
          type: string
    Markup:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        state:
          type: string
        timestamp:
          type: integer
        created:
          type: integer
        author:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
        geometry:
          type: string
        text:
          type: string
        position:
          type: array
          items:
            type: number
        notes:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              description:
                type: string
    CommentThread:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        state:
          type: string
        timestamp:
          type: integer
        author:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        application:
          type: string
        state:
          type: string
        timestamp:
          type: integer
        created:
          type: integer
        author:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
    Attachment:
      type: object
      properties:
        timestamp:
          type: integer
        created:
          type: integer
        contentType:
          type: string
        size:
          type: integer
        etag:
          type: string
        author:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
        tags:
          type: array
        transcript:
          type: array
          items:
            type: string
        preview:
          type: boolean
    GetSubscriptionRef:
      type: object
      properties:
        state:
          type: string
        timestamp:
          type: integer
        scope:
          type: array
          items:
            type: string
    GetPathRef:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        viewOnly:
          type: boolean
    Integration:
      type: object
      properties:
        box:
          type: string
        google:
          type: string
        gdrive:
          type: string
        onshape:
          type: string
        onshapedev:
          type: string
        onshapestaging:
          type: string
        dropbox:
          type: string
        trimble:
          type: string
        onedrive:
          type: string
        onedrivebusiness:
          type: string
      additionalProperties: true
    TokenGenerateResponse:
      type: object
      properties:
        token:
          type: string
        expiration_time:
          type: number
    GetIntegrationAccounts:
      type: object
      properties:
        box:
          type: array
          items:
            type: object
            properties:
              box_id:
                type: string
              box_username:
                type: string
              rootFolderId:
                type: string
        dropbox:
          type: array
          items:
            type: object
            properties:
              dropbox_id:
                type: string
              dropbox_username:
                type: string
              rootFolderId:
                type: string
        gdrive:
          type: array
          items:
            type: object
            properties:
              gdrive_id:
                type: string
              gdrive_username:
                type: string
              rootFolderId:
                type: string
        onedrive:
          type: array
          items:
            type: object
            properties:
              onedrive_id:
                type: string
              onedrive_username:
                type: string
              rootFolderId:
                type: string
        onedrivebusiness:
          type: array
          items:
            type: object
            properties:
              onedrivebusiness_id:
                type: string
              onedrivebusiness_username:
                type: string
              rootFolderId:
                type: string
        onshape:
          type: array
          items:
            type: object
            properties:
              onshape_id:
                type: string
              onshape_username:
                type: string
              rootFolderId:
                type: string
        sharepoint:
          type: array
          items:
            type: object
            properties:
              sharepoint_id:
                type: string
              sharepoint_username:
                type: string
              rootFolderId:
                type: string
        trimble:
          type: array
          items:
            type: object
            properties:
              trimble_id:
                type: string
              trimble_username:
                type: string
              rootFolderId:
                type: string
              server:
                type: string
              regions:
                type: array
                items:
                  type: string
        nextcloud:
          type: array
          items:
            type: object
            properties:
              nextcloud_id:
                type: string
              nextcloud_username:
                type: string
              rootFolderId:
                type: string
              nextcloud_displayName:
                type: string
        webdav:
          type: array
          items:
            type: object
            properties:
              webdav_id:
                type: string
              webdav_username:
                type: string
              rootFolderId:
                type: string
        samples:
          type: array
          items:
            type: object
            properties:
              samples_id:
                type: string
              samples_username:
                type: string
              rootFolderId:
                type: string
              quota:
                type: integer
              usage:
                type: integer
        samples_name:
          type: string
        samples_code:
          type: string
        samples_icon:
          type: string
        samples_icon_black:
          type: string
        samples_icon_png:
          type: string
        samples_icon_black_png:
          type: string
        gdrive_name:
          type: string
        gdrive_code:
          type: string
        gdrive_icon:
          type: string
        gdrive_icon_black:
          type: string
        gdrive_icon_png:
          type: string
        gdrive_icon_black_png:
          type: string
        dropbox_name:
          type: string
        dropbox_code:
          type: string
        dropbox_icon:
          type: string
        dropbox_icon_black:
          type: string
        dropbox_icon_png:
          type: string
        dropbox_icon_black_png:
          type: string
        box_name:
          type: string
        box_code:
          type: string
        box_icon:
          type: string
        box_icon_black:
          type: string
        box_icon_png:
          type: string
        box_icon_black_png:
          type: string
        onedrive_name:
          type: string
        onedrive_code:
          type: string
        onedrive_icon:
          type: string
        onedrive_icon_black:
          type: string
        onedrive_icon_png:
          type: string
        onedrive_icon_black_png:
          type: string
        onedrivebusiness_name:
          type: string
        onedrivebusiness_code:
          type: string
        onedrivebusiness_icon:
          type: string
        onedrivebusiness_icon_black:
          type: string
        onedrivebusiness_icon_png:
          type: string
        onedrivebusiness_icon_black_png:
          type: string
        trimble_name:
          type: string
        trimble_code:
          type: string
        trimble_icon:
          type: string
        trimble_icon_black:
          type: string
        trimble_icon_png:
          type: string
        trimble_icon_black_png:
          type: string
        sharepoint_name:
          type: string
        sharepoint_code:
          type: string
        sharepoint_icon:
          type: string
        sharepoint_icon_black:
          type: string
        sharepoint_icon_png:
          type: string
        sharepoint_icon_black_png:
          type: string
        webdav_name:
          type: string
        webdav_code:
          type: string
        webdav_icon:
          type: string
        webdav_icon_black:
          type: string
        webdav_icon_png:
          type: string
        webdav_icon_black_png:
          type: string
        nextcloud_name:
          type: string
        nextcloud_code:
          type: string
        nextcloud_icon:
          type: string
        nextcloud_icon_black:
          type: string
        nextcloud_icon_png:
          type: string
        nextcloud_icon_black_png:
          type: string
        onshape_name:
          type: string
        onshape_code:
          type: string
        onshape_icon:
          type: string
        onshape_icon_black:
          type: string
        onshape_icon_png:
          type: string
        onshape_icon_black_png:
          type: string
        onshapedev_name:
          type: string
        onshapedev_code:
          type: string
        onshapedev_icon:
          type: string
        onshapedev_icon_black:
          type: string
        onshapedev_icon_png:
          type: string
        onshapedev_icon_black_png:
          type: string
        onshapestaging_name:
          type: string
        onshapestaging_code:
          type: string
        onshapestaging_icon:
          type: string
        onshapestaging_icon_black:
          type: string
        onshapestaging_icon_png:
          type: string
        onshapestaging_icon_black_png:
          type: string
    CreateUser:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        name:
          type: string
        surname:
          type: string
    CheckEmail:
      type: object
      properties:
        isAvailable:
          type: boolean
    UserInfo:
      type: object
      properties:
        fname:
          type: string
        graebertId:
          type: string
        surname:
          type: string
        isAdmin:
          type: string
        options:
          type: object
          properties:
            storages:
              type: object
            editor:
              type: boolean
            fileFilter:
              type: string
            allowRibbon:
              type: boolean
            sharedLinks:
              type: boolean
            quota:
              type: integer
            email_notifications:
              type: boolean
            no_debug_log:
              type: boolean
            plMaxNumberOfDays:
              type: integer
            allowURLChange:
              type: boolean
            export:
              type: boolean
        _id:
          type: string
        locale:
          type: string
        enabled:
          type: boolean
        email:
          type: string
        name:
          type: string
        googleAccount:
          type: boolean
        fileFilter:
          type: string
        licenseExpirationDate:
          type: integer
        licenseType:
          type: string
        countrylocale:
          type: string
        graebertIdHash:
          type: string
        preferences:
          type: object
        intercomAppId:
          type: string
        isTrialShown:
          type: boolean
        showRecent:
          type: boolean
        notificationBarShowed:
          type: integer
        company:
          type: object
        utms:
          type: object
        usage:
          type: integer
        samplesCreated:
          type: boolean
        hasCommanderLicense:
          type: boolean
        hasTouchLicense:
          type: boolean
        sessionId:
          type: string
        username:
          type: string
        userId:
          type: string
        storageType:
          type: string
        roles:
          type: string
        expirationDate:
          type: string
        userAgent:
          type: string
    GetUsers:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
        pageToken:
          type: string
    GetSuggestedUsers:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/GetSuggestedUsersRef'
    Logout:
      type: object
      properties:
        nameId:
          type: string
        sessionIndex:
          type: string
    Nonce:
      type: object
      properties:
        auth:
          type: string
    LongNonce:
      type: object
      properties:
        nonce:
          type: string
    DeleteUser:
      type: object
      properties:
        token:
          type: string
    ListOfStorages:
      type: object
      properties:
        userStorages:
          $ref: '#/components/schemas/ListOfStoragesRef'
        instanceStorages:
          $ref: '#/components/schemas/ListOfStoragesRef'
    ListOfDisabledStorages:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/GetDisabledStoragesResults'
    GetPreSignedUrl:
      type: object
      properties:
        presignedUrl:
          type: string
        presignedUploadId:
          type: string
    CreateFolderResponse:
      type: object
      properties:
        folderId:
          type: string
    GetFolderContent:
      type: object
      properties:
        results:
          type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/GetFileInfo'
            folders:
              type: array
              items:
                $ref: '#/components/schemas/GetFolderInfo'
        number:
          type: integer
          format: int64
        full:
          type: boolean
        fileFilter:
          type: string
        pageToken:
          type: string
          description: exist only with 2 or more pages
        storageType:
          type: string
        externalId:
          type: string
    GetOwners:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetOwners_result'
    CloneFolderResponse:
      type: object
      properties:
        folderId:
          type: string
        parentId:
          type: string
    GetPath:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/GetPathRef'
    GetMetadata:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
    GetFonts:
      type: object
      properties:
        fonts:
          type: array
          items:
            $ref: '#/components/schemas/Font'
    GetFontByID:
      $ref: '#/components/schemas/Font'
    UploadFontResponse:
      type: object
      properties:
        fontName:
          type: string
        fontId:
          type: string
    DeleteFontResponse:
      type: object
      properties:
        fontId:
          type: string
    GetCompany:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        options:
          $ref: '#/components/schemas/Options'
    GetFileLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetFileLogRef'
    GetSessionsLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetSessionsLogResult'
    GetUsersLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetUsersLogResult'
    GetAllStorages:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetAllStoragesRef'
    GetUserAccounts:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetUserAccountsResult'
    GetShareLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetShareLogResult'
    GetSubscriptionsLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetSubscriptionsLogResult'
    GetPerformanceStats:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetPerformanceStatsResult'
    GetOldLinks:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetOldLinksResult'
    GetCachedLinks:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetCachedLinks_result'
    GetJobStatus:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetJobStatus_result'
    UploadFileResponse:
      $ref: '#/components/schemas/UploadFileRef'
    GetRecentFilesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/RecentFilesRef'
    ValidateRecentFilesResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/RecentFilesRef'
    Search:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/SearchRef'
    GetNotifications:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetNotificationsResult'
    MarkNotification:
      properties:
        result:
          $ref: '#/components/schemas/MarkNotificationResult'
    CloneFileResponse:
      type: object
      properties:
        fileId:
          type: string
        parentId:
          type: string
    GetFileDiffs:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        diffs:
          type: array
          items:
            type: object
        baseChangeId:
          type: string
        folderId:
          type: string
        username:
          type: string
        storageType:
          type: string
        encapsulatedId:
          type: string
        changer:
          type: string
        size:
          type: integer
        name:
          type: string
        updateDate:
          type: number
        baseContent:
          type: string
    AddDiffs:
      type: object
      properties:
        changeId:
          type: string
    GetTrashedStatus:
      type: object
      properties:
        isDeleted:
          type: boolean
        nativeResponse:
          type: object
    GetThumbnail:
      type: object
      properties:
        thumbnail:
          type: string
        geomdata:
          type: string
        thumbnailStatus:
          type: string
    UploadPreview:
      type: object
      properties:
        preview:
          type: string
    SharedLink:
      type: object
      properties:
        fileId:
          type: string
        externalId:
          type: string
        userId:
          type: string
        link:
          type: string
        isEnabled:
          type: boolean
        export:
          type: boolean
        expirationTime:
          type: integer
        passwordRequired:
          type: boolean
    FileLinks:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkRef'
    VersionDownloadLink:
      $ref: '#/components/schemas/LinkRef'
    VersionViewLink:
      $ref: '#/components/schemas/LinkRef'
    GetXSession:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SessionRef'
    UpdateXSessionResponse:
      type: object
      properties:
        fileId:
          type: string
        storageType:
          type: string
        xSessionId:
          type: string
        device:
          type: string
        externalId:
          type: string
        checkinFailed:
          type: boolean
    GetXref:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/GetXrefRef'
    CheckXrefPath:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/CheckXrefPathResult'
    XrefSearchBody:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
    GetVersions:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/VersionsRef'
    GetLatestVersionId:
      type: object
      properties:
        versionId:
          type: string
    GetTemplates:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/GetTemplatesRef'
    GetBlockLibraries:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/GetBlockLibrariesResults'
    GetUserCapabilities:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/GetUserCapabilitiesResults'
    GetBlocks:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Block'
    BlockLibrarySearchedResponse:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/GetBlockLibrarySearchedResults'
    GetResourceFolderResponse:
      type: object
      properties:
        results:
          $ref: '#/components/schemas/GetResourceFolderResults'
    CreateResourceResponse:
      type: object
      properties:
        objectId:
          type: string
    ShareResourceResponse:
      type: object
      properties:
        nonExistentEmails:
          type: array
          items:
            type: string
        collaborators:
          type: array
          items:
            type: string
        isShareWithMyself:
          type: boolean
    StatusErrorsResourceResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
    UnShareResourceResponse:
      type: object
      properties:
        selfUnshare:
          type: boolean
    ResourceFolderPathResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/ResourceFolderPathResult'
    ResourceObjectResponse:
      oneOf:
        - $ref: '#/components/schemas/ResourceFile'
        - $ref: '#/components/schemas/ResourceFolder'
    TrashBatch:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
        folders:
          type: array
          items:
            type: string
    EraseAllTrash:
      type: array
      items:
        type: string
    CloneTemplate:
      type: object
      properties:
        filename:
          type: string
        folderId:
          type: string
    UpdateTemplate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    CloneTemplateResponse:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        thumbnailName:
          type: string
        isConflicted:
          type: string
    GetCommentThreads:
      type: object
      properties:
        timestamp:
          type: integer
        commentThreads:
          type: array
          items:
            $ref: '#/components/schemas/CommentThread'
    AddCommentThreadResponse:
      allOf:
        - $ref: '#/components/schemas/CommentThread'
        - type: object
          properties:
            newCollaborators:
              type: array
    GetCommentThread:
      $ref: '#/components/schemas/CommentThread'
    UpdateCommentThread:
      properties:
        timestamp:
          type: integer
        newCollaborators:
          type: array
    AddCommentResponse:
      allOf:
        - $ref: '#/components/schemas/Comment'
        - type: object
          properties:
            newCollaborators:
              type: array
    UpdateComment:
      properties:
        timestamp:
          type: integer
        newCollaborators:
          type: array
    DeleteComment:
      properties:
        timestamp:
          type: integer
    GetAnnotations:
      properties:
        timestamp:
          type: integer
        commentThreads:
          type: array
          items:
            $ref: '#/components/schemas/CommentThread'
        markups:
          type: array
          items:
            $ref: '#/components/schemas/Markup'
    GetMarkups:
      properties:
        timestamp:
          type: integer
        markups:
          type: array
          items:
            $ref: '#/components/schemas/Markup'
    getMarkup:
      $ref: '#/components/schemas/Markup'
    AddMarkupResponse:
      $ref: '#/components/schemas/Markup'
    UpdateMarkupResponse:
      properties:
        timestamp:
          type: integer
    GetAttachments:
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    AddAttachmentResponse:
      $ref: '#/components/schemas/Attachment'
    GetAttachment:
      $ref: '#/components/schemas/Attachment'
    GetAttachmentDescription:
      properties:
        tags:
          type: array
        transcript:
          type: array
          items:
            type: string
    GetSubscription:
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/GetSubscriptionRef'
    AddSubscription:
      type: object
      properties:
        subscriptions:
          type: string
    DeleteSubscription:
      type: object
      properties:
        subscription:
          type: object
          properties:
            state:
              type: string
            timestamp:
              type: integer
    CreateShortcut:
      type: object
      properties:
        name:
          type: string
        createInCurrentFolder:
          type: boolean
    CreateShortcutResponse:
      type: object
      properties:
        id:
          type: string
        parentId:
          type: string
    GetBatchPath:
      properties:
        result:
          $ref: '#/components/schemas/GetBatchPathResult'
    SaveSamlResponse:
      properties:
        samlResponseId:
          type: string
    allUserTemplates:
      properties:
        result:
          $ref: '#/components/schemas/AllUserTemplatesResult'
    CompanyUpdateBody:
      properties:
        isOrgAdmin:
          type: boolean
        organizationId:
          type: string
        options:
          $ref: '#/components/schemas/Options'
        name:
          type: string
    SavePerformanceStats:
      properties:
        fluorineMeta:
          type: object
        xenonMeta:
          type: object
        testResults:
          type: object
    GetFiles:
      properties:
        files:
          type: array
          items:
            type: object
        folders:
          type: array
          items:
            type: object
        number:
          type: number
        pateToken:
          type: string
        full:
          type: boolean
        fileFilter:
          type: string
        status:
          type: string
        storageType:
          type: string
        externalId:
          type: string
    ExternalStorage:
      properties:
        authCode:
          type: string
    SaveRecentFile:
      type:
        object
      required:
        - fileId
        - fileName
        - folderId
        - timestamp
        - thumbnailName
      properties:
        fileId:
          type: string
        fileName:
          type: string
        folderId:
          type: string
        timestamp:
          type: integer
        thumbnailName:
          type: string
    UpdateFileRB:
      type: object
      properties:
        folderId:
          type: string
        fileName:
          type: string
        share:
          type: object
          properties:
            editor:
              type: array
              items:
                type: string
            viewer:
              type: array
              items:
                type: string
            customPermissions:
              type: array
              items:
                type: object
        deshare:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              userId:
                type: string
        tryShare:
          type: string
        newOwner:
          type: string
    PutDiffs:
      properties:
        fileId:
          type: string
        userId:
          type: string
        storageType:
          type: string
        isAdmin:
          type: boolean
        externalId:
          type: string
        preferences:
          type: object
    AddCommentThreadRB:
      properties:
        title:
          type: string
        text:
          type: string
    AddCommentRB:
      properties:
        text:
          type: string
    UpdateCommentThreadRB:
      properties:
        title:
          type: string
        text:
          type: string
        state:
          type: string
    UpdateCommentInThread:
      properties:
        text:
          type: string
        state:
          type: string
    AddMarkupRB:
      properties:
        text:
          type: string
        type:
          type: string
        state:
          type: string
        geometry:
          type: string
        position:
          type: array
          items:
            type: number
        notes:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              description:
                type: string
    UpdateMarkupRB:
      properties:
        state:
          type: string
    Saml:
      properties:
        example:
          type: string
    CreateUserSkeleton:
      properties:
        force:
          type: boolean
        storageType:
          type: string
    UpdateSkeleton:
      properties:
        confirm:
          type: boolean
        storageType:
          type: string
        version:
          type: integer
    UpdateStorage:
      properties:
        disable:
          type: boolean
        storageType:
          type: string
        overrideUsers:
          type: boolean
        excludedUsers:
          type: array
          items:
            type: string
    AdminCreateUser:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        password:
          type: string
    CreateUserByAdmin:
      required:
        - email
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
    UpdateUserByAdmin:
      properties:
        enabled:
          type: boolean
        complianceStatus:
          type: string
        options:
          $ref: '#/components/schemas/Options'
        rolesAdd:
          type: array
          items:
            type: string
        rolesRemove:
          type: array
          items:
            type: string
    UpdateUsersByAdmin:
      properties:
        options:
          $ref: '#/components/schemas/Options'
    IntegrationAccount:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
    TrashRequestBody:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
        folders:
          type: array
          items:
            type: string
        namesIncluded:
          type: boolean
    GetIntegrationSettings:
      properties:
        list:
          type: object
          properties:
            userStorages:
              type: array
              items:
                type: string
            instanceStorages:
              type: array
              items:
                type: string
        order:
          type: array
          items:
            type: string
        info:
          type: object
          properties:
            BOX:
              $ref: '#/components/schemas/StorageSettings'
            DROPBOX:
              $ref: '#/components/schemas/StorageSettings'
            GDRIVE:
              $ref: '#/components/schemas/StorageSettings'
            ONEDRIVE:
              $ref: '#/components/schemas/StorageSettings'
            ONEDRIVEBUSINESS:
              $ref: '#/components/schemas/StorageSettings'
            WEBDAV:
              $ref: '#/components/schemas/StorageSettings'
            SHAREPOINT:
              $ref: '#/components/schemas/StorageSettings'
            SAMPLES:
              $ref: '#/components/schemas/StorageSettings'
            TRIMBLE:
              $ref: '#/components/schemas/StorageSettings'
            ONSHAPE:
              $ref: '#/components/schemas/StorageSettings'
          additionalProperties: true
    CreateNewUser:
      properties:
        email:
          type: string
        password:
          type: string
        passconfirm:
          type: string
        name:
          type: string
        surname:
          type: string
        country:
          type: string
        externalId:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        locale:
          type: string
        editor:
          type: boolean
        emailNotifications:
          type: boolean
        licenseType:
          type: string
        expirationDate:
          type: number
        intercomAccessToken:
          type: string
        intercomAppId:
          type: string
        organizationId:
          type: string
        isOrgAdmin:
          type: string
    GetRegions:
      type: object
      properties:
        regions:
          type: object
          properties:
            default:
              type: object
              properties:
                bucket:
                  type: string
                region:
                  type: string
            ap-northeast-1:
              $ref: '#/components/schemas/Region'
            eu-west-1:
              $ref: '#/components/schemas/Region'
            us-east-1:
              $ref: '#/components/schemas/Region'
    confirmUserAccount:
      properties:
        userId:
          type: string
        hash:
          type: string
    ssoRequest:
      properties:
        state:
          type: string
    GenerateSignedUrlBody:
      type: object
      required:
        - fileName
      properties:
        fileName:
          type: string
        fileContentType:
          type: string
        presignedUploadType:
          type: string
    UpdateUser:
      properties:
        currentPass:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        newPass:
          type: string
        newPassConfirm:
          type: string
        storage:
          type: object
        options:
          $ref: '#/components/schemas/Options'
        preferences:
          type: object
        isTrialShown:
          type: boolean
        notificationBarShowed:
          type: number
        showRecent:
          type: boolean
        locale:
          type: string
        fileFilter:
          type: string
    resetRequest:
      properties:
        email:
          type: string
    reset:
      properties:
        userId:
          type: string
        hash:
          type: string
        newPass:
          type: string
    tryReset:
      properties:
        userId:
          type: string
        hash:
          type: string
    ChangeEmail:
      properties:
        userId:
          type: string
        hash:
          type: string
        userEmail:
          type: string
        newEmail:
          type: string
    FilesCompare:
      properties:
        files:
          type: array
    ThumbnailGenerationBody:
      type: object
      properties:
        disableThumbnail:
          type: boolean
        disableThumbnailFilters:
          type: object
          properties:
            users:
              type: object
              properties:
                id:
                  type: string
    DownloadMultipleBody:
      properties:
        downloads:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              objectType:
                type: string
    CloneFileBody:
      properties:
        fileName:
          type: string
        copyComments:
          type: boolean
        copyShare:
          type: boolean
        includeDeletedComments:
          type: boolean
        includeResolvedComments:
          type: boolean
    StopPollAuth:
      type: object
      properties:
        url:
          type: string
    SaveXSession:
      type: object
      properties:
        mode:
          type: string
    CreateFolderRB:
      type: object
      properties:
        name:
          type: string
        parentId:
          type: string
    CloneFolderRB:
      type: object
      properties:
        folderName:
          type: string
        copyShare:
          type: boolean
    MSG:
      properties:
        senderId:
          type: string
        receiverId:
          type: string
        userId:
          type: string
    UpdateFolderRB:
      type: object
      properties:
        parentId:
          type: string
        folderName:
          type: string
        share:
          type: object
          properties:
            editor:
              type: array
              items:
                type: string
            viewer:
              type: array
              items:
                type: string
            customPermissions:
              type: array
              items:
                type: object
        deshare:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              userId:
                type: string
        tryShare:
          type: string
        newOwner:
          type: string
    BodyStream:
      type: string
      format: binary
    RevisionResponse:
      type: object
      properties:
        revision:
          type: string
    inline_response_200_1:
      properties:
        vertx:
          type: object
        eventbus:
          type: object
        server:
          type: object
    GetUsers_instanceOptions:
      type: object
      properties:
        test:
          type: boolean
    GetUsers_compliance:
      type: object
      properties:
        test:
          type: string
    Login_roles:
      type: object
      properties:
        test:
          type: string
    ListQueue_result:
      type: object
      properties:
        id:
          type: string
        sqsMessage:
          type: object
        sentTimestamp:
          type: string
        timeDisplay:
          type: string
      description: list of objects
    GetOwners_result:
      type: object
      properties:
        _id:
          type: string
          description: owner
        name:
          type: string
      description: list of objects
    GetSessionsLogResult:
      type: object
      properties:
        sessionId:
          type: string
        username:
          type: string
        userId:
          type: string
        loggedIn:
          type: integer
          format: int64
        lastActivity:
          type: integer
          format: int64
        device:
          type: string
        origin:
          type: string
        region:
          type: string
        licenseType:
          type: string
        expired:
          type: string
        files:
          type: string
      description: arraylist
    GetUsersLogResult:
      type: object
      properties:
        email:
          type: string
        userId:
          type: string
        creationDate:
          type: integer
          format: int64
        loggedIn:
          type: integer
          format: int64
      description: JsonArray
    GetUserAccountsResult:
      type: array
      description: Array of account objects
      items:
        type: object
    GetShareLogResult:
      type: object
      properties:
        userId:
          type: string
        fileId:
          type: string
        storageType:
          type: string
        sharingAction:
          type: string
        timestamp:
          type: integer
          format: int64
      description: JsonArray
    GetSubscriptionsLogResult:
      type: object
      properties:
        fileId:
          type: string
        userId:
          type: string
        timestamp:
          type: integer
          format: int64
        scope:
          type: string
        state:
          type: string
      description: JsonArray
    GetPerformanceStatsResult:
      type: object
      properties:
        test:
          type: boolean
      description: JsonArray
    GetOldLinks_result_info:
      type: object
      properties:
        totalLinks:
          minimum: 0
          type: integer
          format: int64
        aliveLinks:
          minimum: 0
          type: integer
          format: int64
        brokenExpLinks:
          minimum: 0
          type: integer
          format: int64
        brokenLinks:
          minimum: 0
          type: integer
          format: int64
        otherLinks:
          minimum: 0
          type: integer
          format: int64
    GetOldLinksResult:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string
        jobName:
          type: string
        s3id:
          type: string
        info:
          $ref: '#/components/schemas/GetOldLinks_result_info'
    GetCachedLinks_result:
      type: object
      properties:
        links:
          type: object
          description: JsonArray
    GetJobStatus_result:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string
    ValidateRecentFiles_result:
      type: object
      properties:
        fileId:
          type: string
        storageType:
          type: string
        filename:
          type: string
        thumbnail:
          type: string
        folderId:
          type: string
          description: optional, depends on file.
      description: list of jsonObject's
    GetNotificationsResult:
      type: object
      properties:
        fileId:
          type: object
        thread:
          type: object
      description: list of notifications
    MarkNotificationResult:
      type: object
      properties:
        records:
          type: integer
          format: int64
    CheckXrefPathResult:
      type: object
      properties:
        state:
          type: string
        folders:
          type: object
    GetDisabledStoragesResults:
      type: array
      items:
        type: object
        properties:
          storageType:
            type: string
          lastUpdated:
            type: string
          updatedBy:
            type: integer
          excludedUsers:
            type: array
            items:
              type: string
    GetBlockLibrariesResults:
      type: array
      items:
        $ref: '#/components/schemas/BlockLibrary'
    ShareResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              error:
                type: string
    SaveXSessionResponse:
      type: object
      properties:
        _id:
          type: string
        expiration:
          type: integer
    GetSaveCheckResults:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
    GetBlocks_results:
      type: array
      items:
        type: object
        properties:
          libId:
            type: string
          id:
            type: string
          name:
            type: string
          fileName:
            type: string
          description:
            type: string
          ownerId:
            type: string
          ownerName:
            type: string
          ownerType:
            type: string
          created:
            type: integer
          modified:
            type: integer
    GetBlockLibrarySearchedResults:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/Block'
        blockLibraries:
          type: array
          items:
            $ref: '#/components/schemas/BlockLibrary'
    GetResourceFolderResults:
      type: object
      properties:
        objectFilter:
          type: string
        full:
          type: boolean
        number:
          type: integer
        files:
          type: array
          items:
            $ref: '#/components/schemas/ResourceFile'
        folders:
          type: array
          items:
            $ref: '#/components/schemas/ResourceFolder'
    CreateBlockLibrary:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        ownerType:
          type: string
          description: USER/GROUP/ORG/PUBLIC
    UpdateBlockLibrary:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ShareBody:
      type: object
      properties:
        emails:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              mode:
                type: string
    UnShareBody:
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
    UploadBlockResponse:
      type: object
      properties:
        blockId:
          type: string
    CreateResourceFolderBody:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    CreateResourceFileBody:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        resourceFile:
          type: string
          format: binary
    UpdateResourceBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ShareResourceObjectsBody:
      type: object
      properties:
        collaborators:
          type: object
          properties:
            editors:
              type: array
              items:
                type: string
            viewers:
              type: array
              items:
                type: string
    MoveResourceObjectsBody:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          objectType:
            type: string
    UnShareResourceObjectsBody:
      type: object
      properties:
        deShare:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              userId:
                type: string
    DeleteResourceObjectsBody:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          objectType:
            type: string
    ResourceFolderPathResult:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        viewOnly:
          type: boolean
    CreateBlockLibraryResponse:
      type: object
      properties:
        libId:
          type: string
    UpdateBlockLibraryResponse:
      $ref: '#/components/schemas/BlockLibrary'
    BlockResponse:
      $ref: '#/components/schemas/Block'
    BlockLibraryResponse:
      $ref: '#/components/schemas/BlockLibrary'
    GetBatchPathResult:
      type: object
      properties:
        _id:
          type: string
        path:
          type: object
    AllUserTemplatesResult:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
    GetUserCapabilitiesResults:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          gde:
            type: string
          created:
            type: integer
          updated:
            type: integer
    DeleteMultipleBlocks:
      type: array
      items:
        type: string
    ConfigResponse:
      type: object
      properties:
        revision:
          type: string
          description: Kudo revision number
        dbPrefix:
          type: string
          description: Prefix used for DB
        urls:
          type: object
          properties:
            licensing:
              type: string
              description: Used licensing URL
            ws:
              type: string
              description: Websocket service URL
    RolesAndPermissionsResponse:
      type: object
      properties:
        roles:
          type: array
        permissions:
          type: array
        interConnection:
          type: object
          properties:
            role:
              type: object
              properties:
                files:
                  type: array
                folders:
                  type: array
  responses:
    DefaultError:
      description: General server error
      content:
        '*/*':
          schema:
            type: object
            properties:
              status:
                type: number
              message:
                type: string
    Accepted:
      description: Request Accepted
      content:
        application/json:
          schema:
            type: object
    Forbidden:
      description: Forbidden access error
      content:
        application/json:
          schema:
            type: object
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
    PreconditionFailed:
      description: Request condition check failed
      content:
        application/json:
          schema:
            type: object
    NotFound:
      description: Request or url not Found
      content:
        application/json:
          schema:
            type: object
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
    Unauthorized:
      description: Request unauthorized
      content:
        application/json:
          schema:
            type: object
    TooManyRequests:
      description: Rate limit exceeded due to consecutive requests
      content:
        application/json:
          schema:
            type: object
    RequestFailed:
      description: Request failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errorId:
                type: string
  parameters:
    FileId:
      name: fileId
      in: path
      required: true
      schema:
        type: string
    FolderId:
      name: folderId
      in: path
      required: true
      schema:
        type: string
    OwnerId:
      name: ownerId
      in: header
      description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
      required: false
      schema:
        type: string
    OwnerType:
      name: ownerType
      in: header
      description: OWNED / ORG / GROUP / SHARED / PUBLIC
      schema:
        type: string
    ResourceType:
      name: type
      in: path
      description: type of the resource
      required: true
      schema:
        type: string
  securitySchemes:
    sessionCookieAuth:
      type: apiKey
      name: sessionid
      in: cookie
    sessionHeaderAuth:
      type: apiKey
      name: sessionid
      in: header
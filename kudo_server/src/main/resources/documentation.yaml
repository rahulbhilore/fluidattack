---
openapi: 3.0.0
info:
  title: Ares Kudo API
  version: 1.0.2
servers:
  - url: https://fluorine-master-latest-ue1.dev.graebert.com/api/
  - url: https://fluorine-master-prod-latest-ue1.dev.graebert.com/api/
  - url: https://staging.kudo.graebert.com/api/
  - url: https://kudo.graebert.com/api/
security:
  - sessionHeaderAuth: [ ]
  - sessionCookieAuth: [ ]
tags:
  - name: files actions
  - name: comments & markups
  - name: xrefs
  - name: versions
  - name: folders actions
paths:
  /users/share/email:
    get:
      tags:
        - users actions
      description: Get list of user suggestions to share
      operationId: emailShare
      x-isAdmin: false
      x-requireStorage: false
      x-isMention: false
      parameters:
        - name: pattern
          in: header
          description: query to search for users
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: header
          description: current file
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: scope
          in: header
          description: Similar to storage type, allows to specify some different scope to look in
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMentionUsers'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
        - users actions
      description: Gets user info
      operationId: getUser
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - users actions
      description: Update user profile
      operationId: updateUser
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - non-prod actions
      description: Create new user, non-prod endpoint
      operationId: addUser
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewUser'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUser'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - users actions
      description: Delete user, admin only
      operationId: deleteUser
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/capabilities:
    get:
      tags:
        - users actions
      description: Gets user capabilities
      operationId: getUserCapabilities
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCapabilities'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/foreign:
    post:
      tags:
        - non-prod actions
      description: Login for Graebert's CP, Google account and SolidWorks. Used by Commander, non-prod only. (unavailable)
      operationId: addForeignUser
      security: [ ]
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: username
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - non-prod actions
      description: Unlink Google account. (unavailable)
      operationId: deleteForeignUser
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/sso:
    post:
      tags:
        - users actions
      description: Login with sso (unavailable)
      operationId: ssoLogin
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/portal:
    post:
      tags:
        - users actions
      description: Create portal user (Unavailable)
      operationId: addPortalUser
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/portal/exists:
    get:
      tags:
        - users actions
      description: Check portal exist (Unavailable)
      operationId: checkPortalUserExist
      security: [ ]
      parameters:
        - name: email
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckEmail'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/confirm:
    post:
      tags:
        - non-prod actions
      description: Notify admins to confirm user account. Non-prod only.
      operationId: usersConfirm
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/confirmUserAccount'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/find:
    get:
      tags:
        - users actions
      description: Find user
      operationId: findUser
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: pattern
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/resetrequest:
    post:
      tags:
        - non-prod actions
      description: Request reset pwd, non-prod.
      operationId: resetUserRequest
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetRequest'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/reset:
    post:
      tags:
        - non-prod actions
      description: Reset user account, non-prod only.
      operationId: resetUserPwd
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/tryReset:
    post:
      tags:
        - non-prod actions
      description: Check if link for reset is still alive, non-prod only.
      operationId: tryResetUser
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tryReset'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/email:
    post:
      tags:
        - non-prod actions
      description: Change email, non-prod only.
      operationId: changeEmail
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmail'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /authentication:
    post:
      tags:
        - non-prod actions
      description: Authenticate, non-prod only. (unavailable)
      operationId: authenticate
      security: [ ]
      parameters:
        - name: authHeader
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /logout:
    post:
      description: Logout
      operationId: logout
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth:
    get:
      description: check auth
      operationId: checkAuth
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "429":
          description: TOO Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /nonce:
    get:
      tags:
        - non-prod actions
      description: Get nonce, non-prod only.
      operationId: getNonce
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nonce'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /longnonce:
    get:
      tags:
        - non-prod actions
      description: Get long nonce
      operationId: getLongNonce
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongNonce'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/users:
    get:
      tags:
        - admins actions
      description: Get user info
      operationId: adminGetUsers
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - admins actions
      description: Update users
      operationId: adminUpdateUsers
      x-isAdmin: true
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUsersByAdmin'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/users/{userId}:
    get:
      tags:
        - admins actions
      description: Get user info
      operationId: adminGetSpecificUserId
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - admins actions
      description: Update user
      operationId: adminUpdateUser
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserByAdmin'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "415":
          description: Unsupported Media
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - admins actions
      description: Delete user
      operationId: adminDeleteUser
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUser'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/users/{userId}/accounts:
    get:
      tags:
        - admins actions
      description: Get user accounts
      operationId: adminGetUserAccounts
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserAccounts'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/storages:
    get:
      tags:
        - admins actions
      description: Get list of available storages
      operationId: getAdminStorages
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfStorages'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/storages/access:
    get:
      tags:
        - admins actions
      description: Get list of disabled storages
      operationId: getAdminDisabledStorages
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfDisabledStorages'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - admins actions
      description: Update storage (Enable/Disable)
      operationId: updateAdminStorageAccess
      x-isAdmin: true
      x-requireStorage: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorage'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/skeleton/{userId}:
    put:
      tags:
        - admins actions
      description: Update skeleton for user
      operationId: updateUserSkelton
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          description: id of user
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkeleton'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - admins actions
      description: Create skeleton for user
      operationId: createUserSkelton
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: userId
          in: path
          description: id of user
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserSkeleton'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/user/create:
    post:
      tags:
        - admins actions
      description: Create new user
      operationId: adminCreateUser
      x-isAdmin: true
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserByAdmin'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCreateUser'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/files:
    get:
      tags:
        - admins actions
      description: Get list of files
      operationId: adminGetFiles
      x-isAdmin: true
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/folders/{folderId}:
    get:
      tags:
        - admins actions
      description: Get list of folders in specific folder
      operationId: adminGetFolders
      x-isAdmin: true
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: folderId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/templates:
    post:
      tags:
        - admins actions
      description: Upload new template
      operationId: adminAddTemplate
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: template
          in: header
          description: template file
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/templates/{tmplId}:
    put:
      tags:
        - admins actions
      description: Update template
      operationId: adminUpdateTemplate
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: name
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - admins actions
      description: Delete template
      operationId: adminDeleteTemplate
      x-isAdmin: true
      x-requireStorage: false
      x-byType: false
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/sessions/{sessionId}:
    delete:
      tags:
        - admins actions
      description: Delete session with specific id
      operationId: adminDeleteSession
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: sessionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/files:
    get:
      tags:
        - admins actions
      description: Get logs about files
      operationId: adminGetFilesLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileLog'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/sessions:
    get:
      tags:
        - admins actions
      description: Get logs about sessions
      operationId: adminGetSessionsLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionsLog'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/users:
    get:
      tags:
        - admins actions
      description: Get logs about users
      operationId: adminGetUsersLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersLog'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/storages:
    get:
      tags:
        - admins actions
      description: Get logs about storages
      operationId: adminGetStoragesLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllStorages'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/shares:
    get:
      tags:
        - admins actions
      description: Get logs about shares
      operationId: adminGetSharesLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetShareLog'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/subscriptions:
    get:
      tags:
        - admins actions
      description: Get logs about subscriptions
      operationId: adminGetSubscriptionsLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionsLog'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/performance:
    get:
      tags:
        - admins actions
      description: Get logs about performance
      operationId: adminGetPerformanceLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPerformanceStats'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/links:
    get:
      tags:
        - admins actions
      description: Get logs about links
      operationId: adminGetLinksLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOldLinks'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/links/cached:
    get:
      tags:
        - admins actions
      description: Get logs about cached links
      operationId: adminGetCachedLinksLog
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCachedLinks'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/job/{jobId}:
    get:
      tags:
        - admins actions
      description: Get logs about job status
      operationId: adminGetJobLog
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: jobId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobStatus'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /stats/performance:
    post:
      tags:
        - non-admins actions
      description: Save performance stats
      operationId: savePerformanceStats
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePerformanceStats'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /customtemplates/{tmplId}/clone:
    post:
      tags:
        - templates actions
      description: Clone custom template
      operationId: cloneCustomTemplate
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneTemplate'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /templates:
    get:
      tags:
        - templates actions
      description: Get list of templates
      operationId: getTemplates
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemplates'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - templates actions
      description: Upload new template
      operationId: addTemplate
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: templateType
          in: header
          description: type of template (USER/PUBLIC)
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - templates actions
      description: Delete all templates
      operationId: deleteTemplates
      x-isAdmin: false
      x-requireStorage: false
      x-byType: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /templates/{tmplId}:
    get:
      tags:
        - templates actions
      description: Get template with specific id
      operationId: getTemplate
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            file:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - templates actions
      description: Update template
      operationId: updateTemplate
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: name
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - templates actions
      description: Delete template
      operationId: deleteTemplate
      x-isAdmin: false
      x-requireStorage: false
      x-byType: false
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /templates/{tmplId}/clone:
    post:
      tags:
        - templates actions
      description: Clone template
      operationId: cloneTemplate
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: tmplId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneTemplate'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /allUserTemplates:
    get:
      tags:
        - templates actions
      description: get all templates related to specific user
      operationId: getUserTemplates
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: orgId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: groupId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allUserTemplates'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trash:
    get:
      tags:
        - trash
      description: Get list of deleted objects
      operationId: getTrash
      x-isAdmin: false
      x-requireStorage: true
      x-trash: true
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - trash
      description: Trash batch
      operationId: updateTrash
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: files
          in: header
          description: JsonArray of deleted files
          required: false
          style: simple
          explode: false
          schema:
            type: object
        - name: folders
          in: header
          description: JsonArray of deleted folders
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - trash
      description: Erase all deleted files
      operationId: eraseAllTrash
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trash/folder/{folderId}:
    get:
      tags:
        - trash
      description: Get deleted folder
      operationId: getTrashFolder
      x-isAdmin: false
      x-requireStorage: true
      x-trash: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /msg:
    post:
      tags:
        - message actions
      description: Send message
      operationId: sendMessage
      x-isAdmin: true
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MSG'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /msg/{msgId}:
    put:
      tags:
        - message actions
      description: Read message
      operationId: readMessage
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: msgId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - message actions
      description: Delete message
      operationId: deleteMessage
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: msgId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /fonts:
    get:
      tags:
        - fonts actions
      description: Get list of all available fonts
      operationId: getFonts
      x-isAdmin: false
      x-requireStorage: false
      x-isCompanyFont: true
      x-isUserFont: true
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFonts'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - fonts actions
      description: Upload new user font
      operationId: addUserFont
      x-isAdmin: false
      x-requireStorage: false
      x-isUploadForCompany: false
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFont'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /fonts/company/{companyId}:
    get:
      tags:
        - fonts actions
      description: Get list of company fonts
      operationId: getCompanyFonts
      x-isAdmin: false
      x-requireStorage: false
      x-isCompanyFont: true
      x-isUserFont: false
      security: [ ]
      parameters:
        - name: companyId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFonts'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - fonts actions
      description: Upload new font for company
      operationId: addCompanyFont
      x-isAdmin: false
      x-requireStorage: false
      x-isUploadForCompany: true
      parameters:
        - name: companyId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFont'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /fonts/user:
    get:
      tags:
        - fonts actions
      description: Get list of user fonts
      operationId: getUserFonts
      x-isAdmin: false
      x-requireStorage: false
      x-isCompanyFont: false
      x-isUserFont: true
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFonts'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /fonts/{fontId}:
    get:
      tags:
        - fonts actions
      description: Get specific font
      operationId: getFont
      x-isAdmin: false
      x-requireStorage: false
      security: [ ]
      parameters:
        - name: fontId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFontByID'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - fonts actions
      description: Delete specific font
      operationId: deleteFont
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fontId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFont'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /feedback:
    post:
      description: Send feedback, Draft side only.
      operationId: sendFeedback
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: subject
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: comment
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /company/{companyId}:
    get:
      tags:
        - company actions
      description: Get company info
      operationId: getCompany
      x-requireStorage: false
      parameters:
        - name: companyId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompany'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - company actions
      description: Update company info
      operationId: updateCompany
      x-requireStorage: false
      parameters:
        - name: companyId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdateBody'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /storages/{type}/add:
    get:
      tags:
        - integration
      description: Add storage
      operationId: addStorage
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: redirect_url
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /healthcheckup:
    get:
      description: Check if server is online
      operationId: healthCheckUp
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /img/email/{objectId}:
    get:
      description: Get email image
      operationId: getEmailImage
      security: [ ]
      parameters:
        - name: objectId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: email
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fid
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /email/file/{objectId}:
    get:
      description: Get file redirect url
      operationId: getFileRedirect
      security: [ ]
      parameters:
        - name: objectId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: email
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: token
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/string:
              schema:
                type: string
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /token/generate:
    post:
      description: generate session token
      operationId: generateToken
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        "200":
          description: OK
          content:
            file:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files:
    get:
      tags:
        - files actions
      description: Get list of files.
      operationId: getFiles
      x-isAdmin: false
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: useNewStructure
          in: header
          description: (Only for ARES Touch) true if client wants to get "My Files/Shared Files" type folder structure, else existing structure would be returned
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFiles'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - files actions
      description: Upload file
      operationId: uploadFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: header
          description: place to upload file
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: header
          description: id of the file to upload
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: file session ID (required while saving the drawing)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: baseChangeId
          in: header
          description: latest versionId of the file (required while saving the drawing)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: presignedUploadId
          in: header
          description: requestId for the uploaded file using presigned url
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFile'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/upload/check:
    get:
      tags:
        - files actions
      description: Check if the file is uploaded.
      operationId: checkUpload
      x-isAdmin: false
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: uploadToken
          in: header
          description: Token to verify the status of file upload
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFile'
        "202":
          description: Request accepted, upload is still pending
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/upload/cancel:
    put:
      tags:
        - files actions
      description: Try to cancel the current async upload process
      operationId: cancelUpload
      x-isAdmin: false
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: uploadToken
          in: header
          description: Upload token for canceling the particular upload
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: presignedUploadId
          in: header
          description: presignedUploadId to delete already uploaded s3 file
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/external/{storage}:
    post:
      tags:
        - files actions
      description: Connect storage
      operationId: connectStorage
      x-isAdmin: false
      x-requireStorage: false
      security: [ ]
      parameters:
        - name: storage
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalStorage'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/recent:
    get:
      tags:
        - files actions
      description: Get list of recent files
      operationId: getRecentFiles
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecentFiles'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/recent/validate:
    get:
      tags:
        - files actions
      description: Validate list of recent files
      operationId: validateRecentFiles
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateRecentFiles'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/recent/{fileId}/validate:
    get:
      tags:
        - files actions
      description: Validate single recent file
      operationId: validateRecentFile
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/recent:
    delete:
      tags:
        - files actions
      description: Remove recent file preview
      operationId: deleteRecentFile
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: id of the file for which the recent preview is to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/recent/restore:
    put:
      tags:
        - files actions
      description: Restore recent file preview
      operationId: restoreRecentFile
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveRecentFile'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/search:
    get:
      tags:
        - files actions
      description: Search
      operationId: searchFiles
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: query
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/notifications:
    get:
      tags:
        - files actions
      description: Get list of notifications
      operationId: getNotificationsList
      x-isAdmin: false
      x-requireStorage: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotifications'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - files actions
      description: Mark notifications
      operationId: markNotifications
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: timestamp
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarkNotification'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}:
    put:
      tags:
        - files actions
      description: Update file
      operationId: updateFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFile'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
      description: Delete file
      operationId: deleteFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /poll:
    delete:
      tags:
        - users actions
      description: stop polling auth url
      operationId: stopPoll
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopPollAuth'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/clone:
    post:
      tags:
        - files actions
      description: Clone file
      operationId: cloneFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: externalId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneFileRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneFile'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/data:
    get:
      tags:
        - files actions
      description: Get file data
      operationId: getFileData
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: ID of the file to download
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: returnDownloadURL
          in: header
          description: true if the client wants to receive a download link instead of data stream
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            multipart/form-data:
              schema:
                type: object
            application/json:
              schema:
                $ref: '#/components/schemas/Get_Download_URL'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/diffs:
    get:
      tags:
        - files actions
      description: Get file diffs
      operationId: getFileDiffs
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: file session id
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: token
          in: header
          description: link's token
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: link's password
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileDiffs'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - files actions
      description: Add diffs in file
      operationId: putFileDiffs
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: file id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: file session id
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDiffs'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDiffs'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/info:
    get:
      tags:
        - files actions
      description: Get object info
      operationId: getFileInfo
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInfo'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/trashed:
    get:
      tags:
        - files actions
      description: Get deleted file
      operationId: getDeletedFile
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTrashedStatus'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/thumbnail:
    get:
      tags:
        - files actions
      description: Get file thumbnail
      operationId: getFileThumbnail
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThumbnail'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/preview:
    post:
      tags:
        - files actions
      description: Upload preview
      operationId: uploadFilePreview
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPreview'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/link:
    get:
      tags:
        - files actions
      description: Get shared link
      operationId: getSharedLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: endTime
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: resetPassword
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSharedLink'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - files actions
      description: Update shared link
      operationId: updateSharedLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: endTime
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: resetEndTime
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
        - name: resetPassword
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSharedLink'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - files actions
      description: Send shared link
      operationId: sendSharedLink
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: data
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "501":
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    delete:
      tags:
        - files actions
      description: Remove shared link
      operationId: removeSharedLink
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/request:
    post:
      tags:
        - files actions
      description: Request access to file
      operationId: requestFileAccess
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/session:
    get:
      tags:
        - files actions
      description: Get Xenon Session
      operationId: getXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXSession'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - files actions
      description: Update Xenon Session
      operationId: updateXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: xSessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: invert
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: downgrade
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: applicantXSession
          in: header
          description: applicant for this session
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateXSession'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - files actions
      description: Save xsession
      operationId: saveXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: force
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveXSession'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveXSessionResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
      description: Remove Xenon Session
      operationId: removeXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: sessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/session/request:
    post:
      tags:
        - files actions
      description: Request xsession
      operationId: requestXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: file id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: xsenon session id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: isMySession
          in: header
          description: is request for owned session
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
      description: Deny xsession
      operationId: denyXenonSession
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: file id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: xsenon session id
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: requestXSessionId
          in: header
          description: requested xsenon session id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/trash:
    put:
      tags:
        - files actions
      description: Send file to trash
      operationId: trashFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/untrash:
    put:
      tags:
        - files actions
      description: Restore file
      operationId: unTrashFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: sessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/download:
    get:
      tags:
        - files actions
      description: download file
      operationId: downloadFile
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: sessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/xref/search:
    post:
      tags:
        - files actions
        - xrefs
      description: Get Xref
      operationId: getFileXref
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: externalId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: path
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXref'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/xref/checkpath:
    post:
      tags:
        - files actions
        - xrefs
      description: Check xref path
      operationId: checkFileXrefPath
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: path
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckXrefPath'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions:
    get:
      tags:
        - files actions
        - versions
      description: Get list of versions
      operationId: getFileVersions
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVersions'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - files actions
        - versions
      description: Upload version
      operationId: uploadFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: action from editor
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: presignedUploadId
          in: header
          description: requestId for the uploaded file version using presigned url
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadVersion'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/latest:
    get:
      tags:
        - files actions
        - versions
      description: Get latest version id
      operationId: getLatestFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLatestVersionId'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/links:
    get:
      tags:
        - files actions
      description: Get file links
      operationId: getFileLinks
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/{versionId}/downloadlink:
    post:
      tags:
        - files actions
        - versions
      description: Get version download link
      operationId: generateFileVersionDownloadLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVersionDownloadLink'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
        - versions
      description: Delete version download link
      operationId: deleteFileVersionDownloadLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/{versionId}/viewlink:
    post:
      tags:
        - files actions
        - versions
      description: Get version view link
      operationId: generateFileVersionViewLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVersionViewLink'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
        - versions
      description: Get version view link
      operationId: deleteFileVersionViewLink
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/{versionId}/data:
    get:
      tags:
        - files actions
        - versions
      description: Get version data
      operationId: getFileVersionData
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: token
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: returnDownloadURL
          in: header
          description: true if the client wants to receive a download link instead of data stream
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            multipart/form-data:
              schema:
                type: object
            application/json:
              schema:
                $ref: '#/components/schemas/Get_Download_URL'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/{versionId}/info:
    get:
      tags:
        - files actions
        - versions
      description: Get version info
      operationId: getFileVersionInfo
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: token
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/{versionId}:
    delete:
      tags:
        - files actions
        - versions
      description: Delete version
      operationId: deleteFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/{versionId}/promote:
    post:
      tags:
        - files actions
        - versions
      description: Promote version
      operationId: promoteFileVersion
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/versions/{versionId}/mark-printed:
    put:
      tags:
        - files actions
        - versions
      description: Mark version as printed
      operationId: markVersionAsPrinted
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: id of the file
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: versionId
          in: path
          description: id of the file version
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/annotations:
    get:
      tags:
        - files actions
      description: Get list of all annotations
      operationId: getAnnotations
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: returnDeleted
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAnnotations'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/commentThreads:
    get:
      tags:
        - files actions
        - comments & markups
      description: Get list of сomment threads
      operationId: getCommentThreads
      x-isAdmin: false
      x-requireStorage: false
      x-address: getCommentThreads
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentThreads'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/commentThread:
    post:
      tags:
        - files actions
        - comments & markups
      description: add comment thread
      operationId: addCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-address: addCommentThread
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentThreadRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentThread'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/commentThread/{annotationId}:
    get:
      tags:
        - files actions
        - comments & markups
      description: Get comment thread
      operationId: getCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: getCommentThread
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentThread'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - files actions
        - comments & markups
      description: Update comment thread
      operationId: updateCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: updateCommentThread
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentThreadRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentThread'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
        - comments & markups
      description: Delete comment thread
      operationId: deleteCommentThread
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: deleteCommentThread
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: timestamp
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/commentThread/{annotationId}/comment:
    post:
      tags:
        - files actions
        - comments & markups
      description: Add comment in thread
      operationId: addComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: addComment
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentThreadRB'
        required: false
      responses:
        "200":
          description: ONE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddComment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/commentThread/{annotationId}/comment/{commentId}:
    put:
      tags:
        - files actions
        - comments & markups
      description: Update comment in thread
      operationId: updateComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: updateComment
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: commentId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentInThread'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateComment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
        - comments & markups
      description: Delete comment in thread
      operationId: deleteComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: threadId
      x-address: deleteComment
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: commentId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteComment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/markups:
    get:
      tags:
        - files actions
        - comments & markups
      description: Get list of markups
      operationId: getMarkups
      x-isAdmin: false
      x-requireStorage: false
      x-address: getMarkups
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMarkups'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/markup:
    post:
      tags:
        - files actions
        - comments & markups
      description: Add markup
      operationId: addMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-address: addMarkup
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMarkupRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddMarkup'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/markup/{annotationId}:
    get:
      tags:
        - files actions
        - comments & markups
      description: Get markup
      operationId: getMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: getMarkup
      parameters:
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMarkups'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - files actions
        - comments & markups
      description: Update markup
      operationId: updateMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: updateMarkup
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMarkupRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMarkup'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
        - comments & markups
      description: Delete markup
      operationId: deleteMarkup
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: deleteMarkup
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: timestamp
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/markup/{annotationId}/comment:
    post:
      tags:
        - files actions
        - comments & markups
      description: Add comment in markup
      operationId: addMarkupComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: addMarkupComment
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentThreadRB'
        required: false
      responses:
        "200":
          description: ONE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddComment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/markup/{annotationId}/comment/{commentId}:
    put:
      tags:
        - files actions
        - comments & markups
      description: Update comment in markup
      operationId: updateMarkupComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: updateMarkupComment
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: commentId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentInThread'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateComment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
        - comments & markups
      description: Delete comment in markup
      operationId: deleteMarkupComment
      x-isAdmin: false
      x-requireStorage: false
      x-id: markupId
      x-address: deleteMarkupComment
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: annotationId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: commentId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/attachments:
    get:
      tags:
        - files actions
      description: Get list of attachments
      operationId: getAttachments
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAttachments'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/attachment:
    post:
      tags:
        - files actions
        - comments & markups
      description: Add attachment
      operationId: addAttachment
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAttachment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/attachments/{attachmentid}:
    get:
      tags:
        - files actions
        - comments & markups
      description: Get attachment with preview
      operationId: getAttachment
      x-isAdmin: false
      x-requireStorage: false
      x-preview: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: attachmentid
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAttachment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/attachments/{attachmentid}/original:
    get:
      tags:
        - files actions
      description: Get attachment without preview
      operationId: getOriginalAttachment
      x-isAdmin: false
      x-requireStorage: false
      x-preview: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: attachmentid
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAttachment'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/attachments/{attachmentid}/description:
    get:
      tags:
        - files actions
        - comments & markups
      description: Get attachment description
      operationId: getAttachmentDescription
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: password
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: attachmentid
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAttachmentDescription'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/subscription:
    get:
      tags:
        - files actions
      description: Get subscription info
      operationId: getSubscription
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscription'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - files actions
      description: Add subscription
      operationId: addSubscription
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddSubscription'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - files actions
      description: Delete subscription
      operationId: deleteSubscription
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscription'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/notifications:
    get:
      tags:
        - files actions
      description: Get file notification
      operationId: getNotification
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - files actions
      description: Mark file notifications as read
      operationId: markNotification
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/shortcut:
    post:
      tags:
        - files actions
        - shortcut
      description: create shortcut for folder
      operationId: createFileShortcut
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: fileId
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShortcutResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/shortcut:
    post:
      tags:
        - folders actions
        - shortcut
      description: create shortcut for folder
      operationId: createFolderShortcut
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: folderId
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShortcutResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/xref/search:
    post:
      tags:
        - folders actions
        - xrefs
      description: search for attach xref
      operationId: getFolderXref
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: externalId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: path
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXref'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/xref/checkpath:
    post:
      tags:
        - folders actions
        - xrefs
      description: Check xref path
      operationId: checkFolderXrefPath
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: path
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckXrefPath'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders:
    post:
      tags:
        - folders actions
      description: Create folder
      operationId: createFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: externalId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: storageType
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolder'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}:
    get:
      tags:
        - folders actions
      description: Get list of folders
      operationId: getFolders
      x-isAdmin: false
      x-requireStorage: true
      x-trash: false
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: useNewStructure
          in: header
          description: (Only for ARES Touch) true if client wants to get "My Files/Shared Files" type folder structure, else existing structure would be returned
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderContent'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - folders actions
      description: Update folder
      operationId: updateFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: externalId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - folders actions
      description: Delete folder
      operationId: deleteFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/owners:
    get:
      tags:
        - folders actions
      description: Get list of folder owners
      operationId: getFolderOwners
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOwners'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/clone:
    post:
      tags:
        - folders actions
      description: Clone folder
      operationId: cloneFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneFolderRB'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneFolder'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/download:
    get:
      tags:
        - folders actions
      description: Download folder
      operationId: downloadFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/download:
    post:
      tags:
        - files actions
      description: Download multiple files and folders
      operationId: downloadMultiple
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: header
          description: Parent folderId for the objects
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: token
          in: header
          description: token to check and get additional data
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadMultipleBody'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/info:
    get:
      tags:
        - folders actions
      description: Get info about folder
      operationId: getFolderInfo
      x-isAdmin: false
      x-requireStorage: true
      security: [ ]
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInfo'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/path:
    get:
      tags:
        - folders actions
      description: Get folder path
      operationId: getFolderPath
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPath'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/path:
    post:
      tags:
        - folders actions
      description: Get paths of all folders (for gdrive only)
      operationId: getFoldersPath
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderIds
          in: header
          description: JsonArray of folders id's
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBatchPath'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/trash:
    put:
      tags:
        - folders actions
      description: Send folder to trash
      operationId: trashFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/untrash:
    put:
      tags:
        - folders actions
      description: Restore folder
      operationId: unTrashFolder
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /folders/{folderId}/metadata:
    get:
      tags:
        - folders actions
      description: Get metadata
      operationId: getFolderMetadata
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetadata'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - folders actions
      description: Update metadata
      operationId: updateFolderMetadata
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: metadata
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - folders actions
      description: Delete metadata
      operationId: deleteFolderMetadata
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: folderId
          in: path
          description: Test
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /saml:
    post:
      description: Save saml respone
      operationId: saveSamlResponse
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Saml'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveSamlResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /revision:
    get:
      tags:
        - Configuration
      description: Get Revision
      operationId: getRevision
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /metrics:
    get:
      description: Get Metrics
      operationId: getMetrics
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /integration:
    get:
      tags:
        - integration
      description: Get list of available integrations from config
      operationId: getIntegrations
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /integration/accounts:
    get:
      tags:
        - integration
      description: Get list of integration accounts
      operationId: getIntegrationAccounts
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationAccounts'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /integration/account:
    put:
      tags:
        - integration
      description: Switch integration accounts
      operationId: switchIntegrationAccount
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationAccount'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - integration
      description: Delete integration account (NOT AVAILABLE)
      operationId: deleteIntegrationAccount
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /integration/account/sessions:
    post:
      tags:
        - integration
      description: Get account file sessions
      operationId: getAccountFileSessions
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationAccount'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetXSession'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /erase:
    put:
      description: Erase batch
      operationId: eraseBatch
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: userId
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: files
          in: header
          description: JsonArray of files
          required: false
          style: simple
          explode: false
          schema:
            type: object
        - name: folders
          in: header
          description: JsonArray of folders
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restore:
    put:
      description: Restore batch
      operationId: restoreBatch
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: files
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
        - name: folders
          in: header
          description: Test
          required: false
          style: simple
          explode: false
          schema:
            type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /integration/settings:
    get:
      tags:
        - integration
      description: Get integration settings
      operationId: getIntegrationSettings
      security: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationSettings'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /regions:
    get:
      description: Get list of regions
      operationId: getRegions
      x-isAdmin: false
      x-requireStorage: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Regions'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/mention:
    get:
      tags:
        - users actions
      description: Get list of user suggestions to mention
      operationId: usersToMention
      x-isAdmin: false
      x-requireStorage: false
      x-isMention: true
      parameters:
        - name: pattern
          in: header
          description: query to search for users
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: fileId
          in: header
          description: current file
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: includeMyself
          in: header
          description: to include yourself in the suggestion list
          required: false
          style: simple
          explode: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMentionUsers'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/region:
    post:
      tags:
        - non-prod actions
      description: change user region
      operationId: changeRegion
      x-isAdmin: true
      x-requireStorage: true
      parameters:
        - name: s3Region
          in: header
          description: region to change
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/compare:
    post:
      tags:
        - Files actions
      description: compare drawings
      operationId: compareFiles
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesCompare'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/logs/flush:
    post:
      tags:
        - admins actions
      description: flush the logs
      operationId: flushLogs
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/memcached:
    get:
      tags:
        - admins actions
      description: Get memcached data
      operationId: getMemcacheData
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - admins actions
      description: Delete memcache data
      operationId: deleteMemcacheData
      x-isAdmin: true
      x-requireStorage: false
      parameters:
        - name: memcachedkey
          in: header
          description: key to delete memcache
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/thumbnail:
    put:
      tags:
        - admins actions
      description: Update thumbnail generation
      operationId: updateThumbnailGeneration
      x-isAdmin: true
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login/cognito:
    post:
      tags:
        - login actions
      description: cognito login
      operationId: doCognitoLogin
      security: [ ]
      parameters:
        - name: id_token
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - login actions
      description: cognito login
      operationId: getCognitoLogin
      security: [ ]
      parameters:
        - name: id_token
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/foreign/extend:
    put:
      tags:
        - login actions
      description: Graebert login
      operationId: graebertLogin
      security: [ ]
      parameters:
        - name: token
          in: header
          description: token for login
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /session/{fileId}/checkin:
    put:
      tags:
        - Files actions
      description: To checkin the file
      operationId: fileCheckIn
      security: [ ]
      parameters:
        - name: fileId
          in: path
          description: fileId to checkin
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: requestToken
          in: header
          description: token to verify the request
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks:
    get:
      tags:
        - block library actions
      description: Get list of all block libraries for user/group/organization/public
      operationId: getBlockLibraries
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: ownerId
          in: header
          description: id of user/group/organization
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: type (USER/GROUP/ORG/PUBLIC)
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlockLibraries'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - block library actions
      description: Create new block library for user/group/organization/public
      operationId: createBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Create_BlockLibrary'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_BlockLibrary_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - block library actions
      description: delete multiple block libraries
      operationId: deleteBlockLibraries
      x-isAdmin: false
      x-requireStorage: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMultipleBlocks'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks/{libId}:
    put:
      tags:
        - block library actions
      description: update existing block library
      operationId: updateBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Update_BlockLibrary'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update_BlockLibrary_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - block library actions
      description: delete block library
      operationId: deleteBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - block library actions
      description: get block library info
      operationId: getBlockLibraryInfo
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to get library info
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block_Library_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks/{libId}/items:
    post:
      tags:
        - block library actions
      description: Upload new block inside a library
      operationId: uploadBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: name
          in: header
          description: name of uploaded block
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: description
          in: header
          description: description of uploaded block
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: libId
          in: path
          description: libId to upload block
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload_Block_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - block library actions
      description: get all blocks of library
      operationId: getBlocks
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to get blocks
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlocks'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - block library actions
      description: delete multiple blocks from a library
      operationId: deleteBlocks
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMultipleBlocks'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks/{libId}/items/{itemId}:
    put:
      tags:
        - block library actions
      description: Update any existing block
      operationId: updateBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to upload block
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to update block
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: name
          in: header
          description: new block name
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: description
          in: header
          description: new block description
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/body_stream'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - block library actions
      description: delete block from a library
      operationId: deleteBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to delete block
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - block library actions
      description: get block info
      operationId: getBlockInfo
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to get info
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks/{libId}/items/{itemId}/content:
    get:
      tags:
        - block library actions
      description: get content(binary) for a block file
      operationId: getBlockContent
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libraryId for the current block library
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to get block content
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks/items/search:
    get:
      tags:
        - block library actions
      description: searches for libraries/blocks within accessible objects for users.
      operationId: searchBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: term
          in: query
          description: term to filter results
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: libId
          in: header
          description: search inside a specific library
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: type
          in: header
          description: search for BLOCK/LIBRARY
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockLibrary_Searched_response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks/{libId}/access:
    post:
      tags:
        - block library actions
      description: Give block library access to users
      operationId: shareBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to share
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Share_Body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Share_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - block library actions
      description: delete block library access from users
      operationId: unShareBlockLibrary
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId to unShare
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnShare_Body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /library/blocks/{libId}/items/{itemId}/access:
    post:
      tags:
        - block library actions
      description: Give block access to users
      operationId: shareBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId for the current library
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to share
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Share_Body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Share_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - block library actions
      description: delete block access from users
      operationId: unShareBlock
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: libId
          in: path
          description: libId for current library
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: blockId to unShare
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnShare_Body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/{type}/{folderId}/items:
    get:
      tags:
        - resources actions
      description: Get all objects inside any folder of a resource
      operationId: getResourceFolderContent
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: type of the resource
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: folderId
          in: path
          description: get all objects for this folderId
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerId
          in: header
          description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: OWNED / ORG / GROUP / SHARED / PUBLIC
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: objectFilter
          in: header
          description: filter for files / folders
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResource_Folder_response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - resources actions
      description: create object inside any folder of a resource
      operationId: createResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: type of the resource
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: folderId
          in: path
          description: create object for this folderId
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerId
          in: header
          description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: OWNED / ORG / GROUP / SHARED / PUBLIC
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Create_Resource_Folder_Body'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Create_Resource_File_Body'
            encoding:
              resourceFile:
                contentType: image/vnd.dwg, image/vnd.dxf, font/ttf, application/octet-stream, font/otf, font/collection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResource_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/{type}/{folderId}/items/{itemId}:
    put:
      tags:
        - resources actions
      description: Update a resource object
      operationId: updateResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: type of the resource
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: folderId
          in: path
          description: parent of the object
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: object to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerId
          in: header
          description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: OWNED / ORG / GROUP / SHARED / PUBLIC
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Update_Resource_Body'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Update_Resource_Body'
            encoding:
              resourceFile:
                contentType: image/vnd.dwg, image/vnd.dxf, font/ttf, application/octet-stream, font/otf, font/collection
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceObject_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/{type}/items/trash:
    put:
      tags:
        - resources actions
      description: Delete resource objects
      operationId: deleteResourceObjects
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: type of the resource
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerId
          in: header
          description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: OWNED / ORG / GROUP / SHARED / PUBLIC
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delete_Resource_Objects_Body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/{type}/items/{itemId}/info:
    get:
      tags:
        - resources actions
      description: Get resource object info
      operationId: getResourceObjectInfo
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: type of the resource
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: object to get
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerId
          in: header
          description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: OWNED / ORG / GROUP / SHARED / PUBLIC
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceObject_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/{type}/items/{itemId}/content:
    get:
      tags:
        - resources actions
      description: Download Resource Object
      operationId: downloadResourceObject
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: type of the resource
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: object to download
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: objectType
          in: header
          description: file or folder
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: recursive
          in: header
          description: Only applicable for folder download, to recursively download inner folder content
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerId
          in: header
          description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: OWNED / ORG / GROUP / SHARED / PUBLIC
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/{type}/items/{itemId}/path:
    get:
      tags:
        - resources actions
      description: Get resource folder path
      operationId: getResourceFolderPath
      x-isAdmin: false
      x-requireStorage: false
      parameters:
        - name: type
          in: path
          description: type of the resource
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: itemId
          in: path
          description: object to get path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerId
          in: header
          description: id for USER / ORG / GROUP / SHARER (not required for PUBLIC)
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: ownerType
          in: header
          description: OWNED / ORG / GROUP / SHARED / PUBLIC
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceFolderPath_Response'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /config:
    get:
      tags:
        - Configuration
      description: Get configuration properties
      operationId: getConfigProperties
      security: []
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/{fileId}/checksave:
    get:
      tags:
        - files actions
      description: Check if file can be saved properly
      operationId: checkFileSave
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: fileId
          in: path
          description: id of the file to check
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: baseChangeId
          in: header
          description: latest versionId of the file
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: xSessionId
          in: header
          description: id of the file session
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSaveCheckResults'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /permissions:
    get:
      tags:
        - Configuration
      description: Get roles and permissions in Kudo
      operationId: getRolesAndPermissions
      security: []
      x-isAdmin: false
      x-requireStorage: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesAndPermissionsResponse'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /upload/request:
    put:
      tags:
        - files actions
      description: begin or end the multiple files upload
      operationId: requestMultipleUpload
      x-isAdmin: false
      x-requireStorage: true
      parameters:
        - name: begin
          in: header
          description: begin/end flag (boolean)
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: uploadRequestId
          in: header
          description: requestId for uploading multiple files (required only when begin is false)
          required: false
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/signedurl/generate:
    post:
      tags:
        - files actions
      description: Get presigned upload URL for s3
      operationId: getS3PreSignedUploadURL
      x-isAdmin: false
      x-requireStorage: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSignedUrlBody'
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPreSignedUrl'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Integration:
      type: object
      properties:
        box:
          type: string
        gogle:
          type: string
        gdrive:
          type: string
        onshape:
          type: string
        onshapedev:
          type: string
        onshapestaging:
          type: string
        dropbox:
          type: string
        trimble:
          type: string
        hancom:
          type: string
        hancomstg:
          type: string
        onedrive:
          type: string
        onedrivebusiness:
          type: string
      additionalProperties: false
    GetIntegrationAccounts:
      type: object
      properties:
        storageType:
          $ref: '#/components/schemas/GetIntegrationAccounts_storageType'
      additionalProperties: false
    CreateUser:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        name:
          type: string
        surname:
          type: string
      additionalProperties: false
    CheckEmail:
      type: object
      properties:
        isAvailable:
          type: boolean
      additionalProperties: false
    GetUsers:
      type: object
      properties:
        enterprise:
          type: boolean
        instanceOptions:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        defaultUserOptions:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        default_locale:
          type: string
        userPreferences:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        defaultCompanyOptions:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        username:
          pattern: ^example[0-9a-f]{8}$
          type: string
        compliance:
          $ref: '#/components/schemas/GetUsers_compliance'
        usage:
          type: integer
          format: int64
      additionalProperties: false
    GetMentionUsers:
      properties:
        results:
          $ref: '#/components/schemas/GetMentionUsers_results'
    Login:
      type: object
      properties:
        enterprise:
          type: boolean
        instanceOptions:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        defaultUserOptions:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        default_locale:
          type: string
        userPreferences:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        defaultCompanyOptions:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        username:
          type: string
        sessionId:
          type: string
        userId:
          type: string
        storageType:
          type: string
        externalId:
          type: string
        roles:
          $ref: '#/components/schemas/Login_roles'
        expirationDate:
          type: integer
          format: int64
      additionalProperties: false
    Logout:
      type: object
      properties:
        nameId:
          type: string
        sessionIndex:
          type: string
      additionalProperties: false
    Auth:
      type: object
      properties:
        storageType:
          type: string
        externalId:
          type: string
        additional:
          $ref: '#/components/schemas/Login_roles'
        username:
          type: string
        name:
          type: string
        userId:
          type: string
        isAdmin:
          type: boolean
        sessionId:
          type: string
        device:
          type: string
        roles:
          $ref: '#/components/schemas/GetUsers_compliance'
        intercomAccessToken:
          type: string
        no_debug_log:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
      additionalProperties: false
    Nonce:
      type: object
      properties:
        auth:
          pattern: ^example[0-9a-f]{8}$
          type: string
      additionalProperties: false
    LongNonce:
      type: object
      properties:
        nonce:
          type: string
      additionalProperties: false
    DeleteUser:
      type: object
      properties:
        token:
          type: string
      additionalProperties: false
    ListOfStorages:
      type: object
      properties:
        userStorages:
          $ref: '#/components/schemas/ListOfStorages_userStorages'
      additionalProperties: false
    ListOfDisabledStorages:
      properties:
        results:
          $ref: '#/components/schemas/GetDisabledStorages_results'
      additionalProperties: false
    GetPreSignedUrl:
      type: object
      properties:
        presignedUrl:
          type: string
        presignedUploadId:
          type: string
      additionalProperties: false
    AdminCreateUser:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        password:
          type: string
      additionalProperties: false
    GetFolderContent:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        files:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        folders:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        number:
          type: integer
          format: int64
        full:
          type: boolean
        fileFilter:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        pageToken:
          type: string
          description: exist only with 2 or more pages
        storageType:
          type: string
        externalId:
          type: string
      additionalProperties: false
    ListQueue:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ListQueue_result'
        approximateNumberOfMessages:
          type: string
      additionalProperties: false
    FlushQueue:
      type: object
      properties:
        approximateNumberOfMessages:
          type: string
      additionalProperties: false
    RemoveRequests:
      type: object
      properties:
        failed:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        succeded:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
      additionalProperties: false
    CreateFolder:
      type: object
      properties:
        folderId:
          type: string
      additionalProperties: false
    GetOwners:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetOwners_result'
      additionalProperties: false
    CloneFolder:
      type: object
      properties:
        folderId:
          type: string
      additionalProperties: false
    GetInfo:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        updateDate:
          minimum: 0
          type: integer
          format: int64
        parent:
          type: string
        owner:
          type: string
        creationDate:
          type: integer
          format: int64
        shared:
          type: boolean
        viewOnly:
          type: boolean
        isOwner:
          type: boolean
        share:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
      additionalProperties: false
    GetPath:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetPath_result'
      additionalProperties: false
    GetMetadata:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
      additionalProperties: false
    GetFonts:
      type: object
      properties:
        fonts:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
      additionalProperties: false
    GetFontByID:
      type: object
      properties:
        locale:
          type: string
        userId:
          type: string
        fontId:
          type: string
        data:
          type: string
          format: binary
        status:
          type: string
      additionalProperties: false
    UploadFont:
      properties:
        fontName:
          type: string
        fontId:
          type: string
    DeleteFont:
      type: object
      properties:
        fontId:
          type: string
      additionalProperties: false
    GetCompany:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        options:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
      additionalProperties: false
    GetFileLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetFileLog_result'
      additionalProperties: false
    GetSessionsLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetSessionsLog_result'
      additionalProperties: false
    GetUsersLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetUsersLog_result'
      additionalProperties: false
    GetAllStorages:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetAllStorages_result'
      additionalProperties: false
    GetUserAccounts:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetUserAccounts_result'
      additionalProperties: false
    GetShareLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetShareLog_result'
      additionalProperties: false
    GetSubscriptionsLog:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetSubscriptionsLog_result'
      additionalProperties: false
    GetPerformanceStats:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetPerformanceStats_result'
      additionalProperties: false
    GetOldLinks:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetOldLinks_result'
      additionalProperties: false
    GetCachedLinks:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetCachedLinks_result'
      additionalProperties: false
    GetJobStatus:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetJobStatus_result'
      additionalProperties: false
    UploadFile:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/UploadFile_result'
      additionalProperties: false
    GetRecentFiles:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetRecentFiles_result'
      additionalProperties: false
    ValidateRecentFiles:
      properties:
        result:
          $ref: '#/components/schemas/ValidateRecentFiles_result'
    Search:
      properties:
        result:
          $ref: '#/components/schemas/Search_result'
    GetNotifications:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/GetNotifications_result'
      additionalProperties: false
    MarkNotification:
      properties:
        result:
          $ref: '#/components/schemas/MarkNotification_result'
    CloneFile:
      type: object
      properties:
        fileId:
          type: string
      additionalProperties: false
    Get_Download_URL:
      type: object
      properties:
        downloadUrl:
          type: string
        fileSize:
          type: integer
        versionId:
          type: string
      additionalProperties: false
    GetFileDiffs:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        diffs:
          type: array
          items:
            type: object
        baseChangeId:
          type: string
        folderId:
          type: string
        username:
          type: string
        storageType:
          type: string
        encapsulatedId:
          type: string
        changer:
          type: string
        size:
          type: integer
        name:
          type: string
        updateDate:
          type: number
        baseContent:
          type: string
      additionalProperties: false
    AddDiffs:
      type: object
      properties:
        changeId:
          type: string
      additionalProperties: false
    GetTrashedStatus:
      type: object
      properties:
        isDeleted:
          type: boolean
        nativeResponse:
          type: object
          additionalProperties: false
      additionalProperties: false
    GetThumbnail:
      type: object
      properties:
        thumbnail:
          type: string
          description: thumbnail url.
        geomdata:
          type: string
      additionalProperties: false
    UploadPreview:
      type: object
      properties:
        preview:
          type: string
      additionalProperties: false
    GetSharedLink:
      type: object
      properties:
        fileId:
          type: string
        externalId:
          type: string
        userId:
          type: string
        pk:
          type: string
        link:
          type: string
      additionalProperties: false
    GetVersionViewLink:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        externalId:
          type: string
        userId:
          type: string
        pk:
          type: string
        link:
          type: string
      additionalProperties: false
    GetVersionDownloadLink:
      type: object
      properties:
        convertToPdf:
          type: boolean
        fileId:
          type: string
        versionId:
          type: string
        externalId:
          type: string
        userId:
          type: string
        pk:
          type: string
        link:
          type: string
      additionalProperties: false
    UpdateSharedLink:
      properties:
        fileId:
          type: string
        externalId:
          type: string
        userId:
          type: string
        pk:
          type: string
    GetXSession:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
          additionalProperties: false
          description: JsonArray of file sessions
      additionalProperties: false
    UpdateXSession:
      type: object
      properties:
        fileId:
          type: string
      additionalProperties: false
    GetXref:
      properties:
        result:
          $ref: '#/components/schemas/GetXref_result'
    CheckXrefPath:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/CheckXrefPath_result'
      additionalProperties: false
    GetVersions:
      properties:
        result:
          $ref: '#/components/schemas/GetVersions_result'
    GetLatestVersionId:
      properties:
        versionId:
          type: string
    UploadVersion:
      properties:
        id:
          type: string
        creationTime:
          type: integer
        name:
          type: string
        isCustomName:
          type: boolean
        modifier:
          type: object
        permissions:
          type: object
        size:
          type: integer
        thumbnail:
          type: string
        hash:
          type: string
    GetTemplates:
      properties:
        results:
          $ref: '#/components/schemas/GetTemplates_results'
    GetBlockLibraries:
      properties:
        results:
          $ref: '#/components/schemas/GetBlockLibraries_results'
    GetUserCapabilities:
      properties:
        results:
          $ref: '#/components/schemas/GetUserCapabilities_results'
    GetBlocks:
      properties:
        results:
          $ref: '#/components/schemas/GetBlocks_results'
    BlockLibrary_Searched_response:
      properties:
        results:
          $ref: '#/components/schemas/GetBlockLibrary_Searched_results'
    GetResource_Folder_response:
      properties:
        results:
          $ref: '#/components/schemas/GetResource_Folder_results'
    CreateResource_Response:
      type: object
      properties:
        objectId:
          type: string
    ResourceFolderPath_Response:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ResourceFolderPath_Result'
    ResourceObject_Response:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        parent:
          type: string
        resourceType:
          type: string
        ownerId:
          type: string
        ownerType:
          type: string
        ownerName:
          type: string
        fileName:
          type: string
        isOwner:
          type: boolean
        fileSize:
          type: string
        userId:
          type: string
        path:
          type: string
        faces:
          type: array
          items:
            type: object
            properties:
              bold:
                type: string
              fontFamily:
                type: string
              index:
                type: integer
                format: int64
              italic:
                type: string
              style:
                type: string
              weight:
                type: integer
                format: int64
    CloneTemplate:
      properties:
        result:
          $ref: '#/components/schemas/CloneTemplate_result'
    GetCommentThreads:
      properties:
        commentThreads:
          type: object
    AddCommentThread:
      properties:
        title:
          type: string
        state:
          type: string
        timestamp:
          type: integer
        comments:
          type: object
        entityHandles:
          type: object
        spaceId:
          type: string
        viewportId:
          type: string
    GetCommentThread:
      properties:
        title:
          type: string
        state:
          type: string
        timestamp:
          type: integer
        comments:
          type: object
        entityHandles:
          type: object
        spaceId:
          type: string
        viewportId:
          type: string
    UpdateCommentThread:
      properties:
        timestamp:
          type: integer
    AddComment:
      properties:
        author:
          type: object
        timestamp:
          type: integer
        created:
          type: integer
        application:
          type: string
        state:
          type: string
        text:
          type: string
        loc:
          type: string
    UpdateComment:
      properties:
        timestamp:
          type: integer
    DeleteComment:
      properties:
        timestamp:
          type: integer
    GetAnnotations:
      properties:
        commentThreads:
          type: object
        markups:
          type: object
    GetMarkups:
      properties:
        markups:
          type: object
    AddMarkup:
      properties:
        id:
          type: string
        type:
          type: string
        state:
          type: string
        timestamp:
          type: integer
        comments:
          type: object
        created:
          type: integer
        spaceId:
          type: string
        viewportId:
          type: string
        author:
          type: object
        color:
          type: integer
        geometry:
          type: string
        stampId:
          type: string
        text:
          type: string
        position:
          type: array
        size:
          type: object
    UpdateMarkup:
      properties:
        timestamp:
          type: integer
    GetAttachments:
      properties:
        attachmants:
          $ref: '#/components/schemas/GetAttachments_attachmants'
    AddAttachment:
      properties:
        attachmants:
          $ref: '#/components/schemas/GetAttachments_attachmants'
    GetAttachment:
      properties:
        data:
          type: string
        contentType:
          type: string
        tags:
          type: object
        transcript:
          type: object
    GetAttachmentDescription:
      properties:
        tags:
          type: object
        transcript:
          type: object
    GetSubscription:
      properties:
        subscription:
          $ref: '#/components/schemas/GetSubscription_subscription'
    AddSubscription:
      properties:
        subscription:
          type: string
    DeleteSubscription:
      properties:
        subscription:
          type: object
    CreateShortcutResponse:
      properties:
        id:
          type: string
        parentId:
          type: string
    GetBatchPath:
      properties:
        result:
          $ref: '#/components/schemas/GetBatchPath_result'
    SaveSamlResponse:
      properties:
        samlResponseId:
          type: string
    Status:
      properties:
        status:
          type: string
    Error:
      properties:
        status code:
          type: number
    allUserTemplates:
      properties:
        result:
          $ref: '#/components/schemas/allUserTemplates_result'
    CompanyUpdateBody:
      properties:
        isOrgAdmin:
          type: boolean
        organizationId:
          type: string
        options:
          type: object
        name:
          type: string
    SavePerformanceStats:
      properties:
        fluorineMeta:
          type: object
        xenonMeta:
          type: object
        testResults:
          type: object
    GetFiles:
      properties:
        files:
          type: array
          items:
            type: object
        folders:
          type: array
          items:
            type: object
        number:
          type: number
        pateToken:
          type: string
        full:
          type: boolean
        fileFilter:
          type: string
        status:
          type: string
        storageType:
          type: string
        externalId:
          type: string
    ExternalStorage:
      properties:
        authCode:
          type: string
    SaveRecentFile:
      type:
        object
      required:
        - fileId
        - fileName
        - folderId
        - timestamp
        - thumbnailName
      properties:
        fileId:
          type: string
        fileName:
          type: string
        folderId:
          type: string
        timestamp:
          type: integer
        thumbnailName:
          type: string
    UpdateFile:
      properties:
        folderId:
          type: string
        fileName:
          type: string
        share:
          type: object
        deshare:
          type: array
        tryShare:
          type: string
        newOwner:
          type: string
    PutDiffs:
      properties:
        fileId:
          type: string
        userId:
          type: string
        storageType:
          type: string
        isAdmin:
          type: boolean
        externalId:
          type: string
        preferences:
          type: object
    AddCommentThreadRB:
      properties:
        text:
          type: string
    UpdateCommentThreadRB:
      properties:
        spaceId:
          type: string
        viewportId:
          type: string
        title:
          type: string
        state:
          type: string
        text:
          type: string
        idsAdd:
          type: array
        idsRemove:
          type: array
    UpdateCommentInThread:
      properties:
        text:
          type: string
        state:
          type: string
    AddMarkupRB:
      properties:
        type:
          type: string
        spaceId:
          type: string
        viewportId:
          type: string
        color:
          type: integer
        stampId:
          type: string
        text:
          type: string
        geometry:
          type: string
        size:
          type: object
        position:
          type: array
        notes:
          type: array
    UpdateMarkupRB:
      properties:
        type:
          type: string
        spaceId:
          type: string
        viewportId:
          type: string
        color:
          type: integer
        stampId:
          type: string
        text:
          type: string
        geometry:
          type: string
        size:
          type: object
        position:
          type: array
        notes:
          type: array
    Saml:
      properties:
        example:
          type: string
    CreateUserSkeleton:
      properties:
        force:
          type: boolean
        storageType:
          type: string
    UpdateSkeleton:
      properties:
        confirm:
          type: boolean
        storageType:
          type: string
        version:
          type: integer
    UpdateStorage:
      properties:
        disable:
          type: boolean
        storageType:
          type: string
        overrideUsers:
          type: boolean
        excludedUsers:
          type: array
          items:
            type: string
    CreateUserByAdmin:
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
    UpdateUserByAdmin:
      properties:
        enabled:
          type: boolean
        complianceStatus:
          type: string
        options:
          type: object
        rolesAdd:
          type: array
          items:
            type: string
        rolesRemove:
          type: array
          items:
            type: string
    UpdateUsersByAdmin:
      properties:
        options:
          type: object
    IntegrationAccount:
      properties:
        id:
          type: string
        type:
          type: string
    GetIntegrationSettings:
      properties:
        list:
          $ref: '#/components/schemas/GetIntegrationSettings_list'
        info:
          type: object
    CreateNewUser:
      properties:
        email:
          type: string
        password:
          type: string
        passconfirm:
          type: string
        name:
          type: string
        surname:
          type: string
        country:
          type: string
        externalId:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        locale:
          type: string
        editor:
          type: boolean
        emailNotifications:
          type: boolean
        licenseType:
          type: string
        expirationDate:
          type: number
        intercomAccessToken:
          type: string
        intercomAppId:
          type: string
        organizationId:
          type: string
        isOrgAdmin:
          type: string
    Regions:
      properties:
        regions:
          $ref: '#/components/schemas/Regions_regions'
    confirmUserAccount:
      properties:
        userId:
          type: string
        hash:
          type: string
    GenerateSignedUrlBody:
      type: object
      required:
        - fileName
      properties:
        fileName:
          type: string
        fileContentType:
          type: string
        presignedUploadType:
          type: string
    UpdateUser:
      properties:
        currentPass:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        newPass:
          type: string
        newPassConfirm:
          type: string
        storage:
          type: object
        options:
          type: object
        preferences:
          type: object
        isTrialShown:
          type: boolean
        notificationBarShowed:
          type: number
        showRecent:
          type: boolean
        locale:
          type: string
        fileFilter:
          type: string
    resetRequest:
      properties:
        email:
          type: string
    reset:
      properties:
        userId:
          type: string
        hash:
          type: string
        newPass:
          type: string
    tryReset:
      properties:
        userId:
          type: string
        hash:
          type: string
    ChangeEmail:
      properties:
        userId:
          type: string
        hash:
          type: string
        userEmail:
          type: string
        newEmail:
          type: string
    FilesCompare:
      properties:
        files:
          type: array
    DownloadMultipleBody:
      properties:
        downloads:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              objectType:
                type: string
    CloneFileRB:
      properties:
        fileName:
          type: string
    StopPollAuth:
      properties:
        url:
          type: string
    SaveXSession:
      properties:
        mode:
          type: string
    CreateFolderRB:
      properties:
        name:
          type: string
        parentId:
          type: string
    CloneFolderRB:
      properties:
        folderName:
          type: string
    MSG:
      properties:
        senderId:
          type: string
        receiverId:
          type: string
        userId:
          type: string
    UpdateFolderRB:
      properties:
        parentId:
          type: string
        folderName:
          type: string
        tryShare:
          type: string
        newOwner:
          type: string
        share:
          type: object
        deShare:
          type: array
          items:
            type: object
    body_stream:
      type: string
      format: binary
    inline_response_200:
      properties:
        revision:
          type: string
    inline_response_200_1:
      properties:
        vertx:
          type: object
        eventbus:
          type: object
        server:
          type: object
    GetIntegrationAccounts_storageType:
      type: object
      properties:
        storageName_name:
          type: string
        storageName_code:
          type: string
        storageName_icon:
          type: string
        storageName_icon_black:
          type: string
        storageName_icon_png:
          type: string
        storageName_icon_black_png:
          type: string
    GetUsers_instanceOptions:
      type: object
      properties:
        test:
          type: boolean
    GetMentionUsers_results:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        username:
          type: string
        surname:
          type: string
    GetUsers_compliance:
      type: object
      properties:
        test:
          type: string
    Login_roles:
      type: object
      properties:
        test:
          pattern: ^example[0-9a-f]{8}$
          type: string
    ListOfStorages_userStorages:
      type: object
      properties:
        test:
          type: boolean
      description: list of storages for user.

    ListQueue_result:
      type: object
      properties:
        id:
          type: string
        sqsMessage:
          type: object
          additionalProperties: false
        sentTimestamp:
          type: string
        timeDisplay:
          type: string
      description: list of objects
    GetOwners_result:
      type: object
      properties:
        _id:
          type: string
          description: owner
        name:
          type: string
      description: list of objects
    GetPath_result:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        viewOnly:
          type: boolean
      description: ArrayList of folders in path
    GetFileLog_result:
      type: object
      properties:
        username:
          type: string
        userId:
          type: string
        fileId:
          type: string
        storageType:
          type: string
        device:
          type: string
        actionType:
          type: string
        opened:
          type: integer
          format: int64
      description: arraylist
    GetSessionsLog_result:
      type: object
      properties:
        sessionId:
          type: string
        username:
          type: string
        userId:
          type: string
        loggedIn:
          type: integer
          format: int64
        lastActivity:
          type: integer
          format: int64
        device:
          type: string
        origin:
          type: string
        region:
          type: string
        licenseType:
          type: string
        expired:
          type: string
        files:
          type: string
      description: arraylist
    GetUsersLog_result:
      type: object
      properties:
        email:
          type: string
        userId:
          type: string
        creationDate:
          type: integer
          format: int64
        loggedIn:
          type: integer
          format: int64
      description: JsonArray
    GetAllStorages_result:
      type: object
      properties:
        email:
          type: string
        userId:
          type: string
        storages:
          $ref: '#/components/schemas/GetUsers_instanceOptions'
        connected:
          type: integer
          format: int64
      description: JsonArray
    GetUserAccounts_result:
      type: array
      description: Array of account objects
      items:
        type: object
    GetShareLog_result:
      type: object
      properties:
        userId:
          type: string
        fileId:
          type: string
        storageType:
          type: string
        sharingAction:
          type: string
        timestamp:
          type: integer
          format: int64
      description: JsonArray
    GetSubscriptionsLog_result:
      type: object
      properties:
        fileId:
          type: string
        userId:
          type: string
        timestamp:
          type: integer
          format: int64
        scope:
          type: string
        state:
          type: string
      description: JsonArray
    GetPerformanceStats_result:
      type: object
      properties:
        test:
          type: boolean
      description: JsonArray
    GetOldLinks_result_info:
      type: object
      properties:
        totalLinks:
          minimum: 0
          type: integer
          format: int64
        aliveLinks:
          minimum: 0
          type: integer
          format: int64
        brokenExpLinks:
          minimum: 0
          type: integer
          format: int64
        brokenLinks:
          minimum: 0
          type: integer
          format: int64
        otherLinks:
          minimum: 0
          type: integer
          format: int64
    GetOldLinks_result:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string
        jobName:
          type: string
        s3id:
          type: string
        info:
          $ref: '#/components/schemas/GetOldLinks_result_info'
    GetCachedLinks_result:
      type: object
      properties:
        links:
          type: object
          additionalProperties: false
          description: JsonArray
    GetJobStatus_result:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string
    UploadFile_result:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        thumbnailName:
          type: string
        changeId:
          type: string
        fileConflicted:
          type: boolean
        fileSessionExpired:
          type: boolean
    GetRecentFiles_result:
      type: object
      properties:
        fileId:
          type: string
        storageType:
          type: string
        filename:
          type: string
        thumbnail:
          type: string
        folderId:
          pattern: ^example[0-9a-f]{8}$
          type: string
          description: optional, depends on file.
      description: list of jsonObject's
    ValidateRecentFiles_result:
      type: object
      properties:
        fileId:
          type: string
        storageType:
          type: string
        filename:
          type: string
        thumbnail:
          type: string
        folderId:
          type: string
          description: optional, depends on file.
      description: list of jsonObject's
    Search_result:
      type: object
      properties:
        storageType:
          type: string
        externalId:
          type: string
        name:
          type: string
        files:
          type: object
          additionalProperties: false
        folders:
          type: object
          additionalProperties: false
      description: list of  founded objects
    GetNotifications_result:
      type: object
      properties:
        fileId:
          type: object
          additionalProperties: false
        thread:
          type: object
          additionalProperties: false
      description: list of notifications
    MarkNotification_result:
      type: object
      properties:
        records:
          type: integer
          format: int64
    GetXref_result:
      type: object
      properties:
        path:
          type: string
        files:
          type: object
          additionalProperties: false
      description: list of xref
    CheckXrefPath_result:
      type: object
      properties:
        state:
          type: string
        folders:
          type: object
    GetVersions_result:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        ext:
          type: string
    GetTemplates_results:
      type: object
      properties:
        iscustom:
          type: boolean
        _id:
          type: string
        author:
          type: string
        name:
          type: string
        comment:
          type: string
    GetDisabledStorages_results:
      type: array
      items:
        type: object
        properties:
          storageType:
            type: string
          lastUpdated:
            type: string
          updatedBy:
            type: integer
          excludedUsers:
            type: array
            items:
              type: string
    GetBlockLibraries_results:
      type: array
      items:
        type: object
        properties:
          libId:
            type: string
          name:
            type: string
          description:
            type: string
          ownerId:
            type: string
          ownerName:
            type: string
          ownerType:
            type: string
          created:
            type: integer
          modified:
            type: integer
    Share_Response:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              error:
                type: string
    SaveXSessionResponse:
      type: object
      properties:
        _id:
          type: string
        expiration:
          type: integer
    GetSaveCheckResults:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
    GetBlocks_results:
      type: array
      items:
        type: object
        properties:
          libId:
            type: string
          blockId:
            type: string
          name:
            type: string
          fileName:
            type: string
          description:
            type: string
          ownerId:
            type: string
          ownerName:
            type: string
          ownerType:
            type: string
          created:
            type: integer
          modified:
            type: integer
    GetBlockLibrary_Searched_results:
      type: object
      properties:
        blocks:
          type: array
          items:
            type: object
            properties:
              libId:
                type: string
              blockId:
                type: string
              name:
                type: string
              fileName:
                type: string
              description:
                type: string
              ownerId:
                type: string
              ownerName:
                type: string
              ownerType:
                type: string
              created:
                type: integer
              modified:
                type: integer
        blockLibraries:
          type: array
          items:
            type: object
            properties:
              libId:
                type: string
              name:
                type: string
              description:
                type: string
              ownerId:
                type: string
              ownerName:
                type: string
              ownerType:
                type: string
              created:
                type: integer
              modified:
                type: integer
    GetResource_Folder_results:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              created:
                type: integer
                format: int64
              updated:
                type: integer
                format: int64
              parent:
                type: string
              resourceType:
                type: string
              ownerId:
                type: string
              ownerType:
                type: string
              ownerName:
                type: string
              fileName:
                type: string
              isOwner:
                type: boolean
              fileSize:
                type: string
              userId:
                type: string
              path:
                type: string
              faces:
                type: array
                items:
                  type: object
                  properties:
                    bold:
                      type: string
                    fontFamily:
                      type: string
                    index:
                      type: integer
                      format: int64
                    italic:
                      type: string
                    style:
                      type: string
                    weight:
                      type: integer
                      format: int64
        folders:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              created:
                type: integer
                format: int64
              updated:
                type: integer
                format: int64
              parent:
                type: string
              resourceType:
                type: string
              ownerId:
                type: string
              ownerType:
                type: string
              ownerName:
                type: string
              isOwner:
                type: boolean
              userId:
                type: string
              path:
                type: string
    Create_BlockLibrary:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        ownerType:
          type: string
          description: USER/GROUP/ORG/PUBLIC
    Update_BlockLibrary:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Share_Body:
      type: object
      properties:
        emails:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              mode:
                type: string
    UnShare_Body:
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
    Upload_Block_Response:
      type: object
      properties:
        blockId:
          type: string
    Create_Resource_Folder_Body:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    Create_Resource_File_Body:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        resourceFile:
          type: string
          format: binary
    Update_Resource_Body:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Delete_Resource_Objects_Body:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          objectType:
            type: string
    ResourceFolderPath_Result:
      type: array
      properties:
        _id:
          type: string
        name:
          type: string
        viewOnly:
          type: boolean
      description: list of resource folders in path
    Create_BlockLibrary_Response:
      type: object
      properties:
        libId:
          type: string
    Update_BlockLibrary_Response:
      type: object
      properties:
        libId:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          type: string
        created:
          type: integer
        modified:
          type: integer
    Block_Response:
      type: object
      properties:
        libId:
          type: string
        blockId:
          type: string
        name:
          type: string
        fileName:
          type: string
        description:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          type: string
        created:
          type: integer
        modified:
          type: integer
        shares:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              name:
                type: string
              email:
                type: string
              mode:
                type: string
    Block_Library_Response:
      type: object
      properties:
        libId:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          type: string
        created:
          type: integer
        modified:
          type: integer
        shares:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              name:
                type: string
              email:
                type: string
              mode:
                type: string
    CloneTemplate_result:
      type: object
      properties:
        fileId:
          type: string
        versionId:
          type: string
        thumbnailName:
          type: string
        updateName:
          type: string
        name:
          type: string
    GetAttachments_attachmants:
      type: object
      properties:
        timestamp:
          type: integer
        created:
          type: integer
        contentType:
          type: string
        size:
          type: integer
        etag:
          type: string
        author:
          type: object
        tags:
          type: object
        preview:
          type: boolean
    GetSubscription_subscription:
      type: object
      properties:
        state:
          type: string
        timestamp:
          type: integer
        scope:
          type: object
    GetBatchPath_result:
      type: object
      properties:
        _id:
          type: string
        path:
          type: object
    allUserTemplates_result:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
    GetIntegrationSettings_list:
      type: object
      properties:
        userStorages:
          type: object
        instanceStorages:
          type: object
        order:
          type: object
    Regions_regions:
      type: object
      properties:
        ap-northeast-1:
          type: object
        eu-west-1:
          type: object
        us-east-1:
          type: object
    GetUserCapabilities_results:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          gde:
            type: string
          created:
            type: integer
          updated:
            type: integer
    DeleteMultipleBlocks:
      type: array
      items:
        type: string
    ConfigResponse:
      type: object
      additionalProperties: true
      properties:
        revision:
          type: string
          description: Kudo's revision number
        dbPrefix:
          type: string
          description: Prefix used for DB
        urls:
          type: object
          additionalProperties: true
          properties:
            licensing:
              type: string
              description: Used licensing URL
            ws:
              type: string
              description: Websocket service URL
    RolesAndPermissionsResponse:
      type: object
      properties:
        roles:
          type: array
        permissions:
          type: array
        interConnection:
          type: object
          properties:
            role:
              type: object
              properties:
                files:
                  type: array
                folders:
                  type: array
  securitySchemes:
    sessionCookieAuth:
      type: apiKey
      name: sessionid
      in: cookie
    sessionHeaderAuth:
      type: apiKey
      name: sessionid
      in: header
